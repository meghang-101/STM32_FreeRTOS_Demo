
combined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009160  08009160  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009160  08009160  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009160  08009160  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021d8  200001e8  08009350  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023c0  08009350  000223c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f3b  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ea  00000000  00000000  0003314c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00036938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00037848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b207  00000000  00000000  000385b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bee  00000000  00000000  000537b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0e1  00000000  00000000  000663a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  000f34d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ff0 	.word	0x08008ff0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008ff0 	.word	0x08008ff0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000204 	.word	0x20000204
 800018c:	200002b8 	.word	0x200002b8

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b096      	sub	sp, #88	; 0x58
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 f9c1 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f849 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8a1 	bl	80002e4 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of led1 */
  osThreadDef(led1, led1blink, osPriorityNormal, 0, 128);
 80001a2:	4b1d      	ldr	r3, [pc, #116]	; (8000218 <main+0x88>)
 80001a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001a8:	461d      	mov	r5, r3
 80001aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led1Handle = osThreadCreate(osThread(led1), NULL);
 80001b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f006 ff8c 	bl	80070da <osThreadCreate>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a15      	ldr	r2, [pc, #84]	; (800021c <main+0x8c>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of led2 */
  osThreadDef(led2, led2blink, osPriorityNormal, 0, 128);
 80001c8:	4b15      	ldr	r3, [pc, #84]	; (8000220 <main+0x90>)
 80001ca:	f107 0420 	add.w	r4, r7, #32
 80001ce:	461d      	mov	r5, r3
 80001d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led2Handle = osThreadCreate(osThread(led2), NULL);
 80001dc:	f107 0320 	add.w	r3, r7, #32
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f006 ff79 	bl	80070da <osThreadCreate>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <main+0x94>)
 80001ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of usbcomm */
  osThreadDef(usbcomm, usbcomm_func, osPriorityNormal, 0, 128);
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <main+0x98>)
 80001f0:	1d3c      	adds	r4, r7, #4
 80001f2:	461d      	mov	r5, r3
 80001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usbcommHandle = osThreadCreate(osThread(usbcomm), NULL);
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2100      	movs	r1, #0
 8000204:	4618      	mov	r0, r3
 8000206:	f006 ff68 	bl	80070da <osThreadCreate>
 800020a:	4603      	mov	r3, r0
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <main+0x9c>)
 800020e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000210:	f006 ff5c 	bl	80070cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	e7fe      	b.n	8000214 <main+0x84>
 8000216:	bf00      	nop
 8000218:	0800903c 	.word	0x0800903c
 800021c:	200004b8 	.word	0x200004b8
 8000220:	08009058 	.word	0x08009058
 8000224:	200004bc 	.word	0x200004bc
 8000228:	08009074 	.word	0x08009074
 800022c:	200004c0 	.word	0x200004c0

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b094      	sub	sp, #80	; 0x50
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f008 fe10 	bl	8008e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000260:	2301      	movs	r3, #1
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000280:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000286:	4618      	mov	r0, r3
 8000288:	f002 f930 	bl	80024ec <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000292:	f000 f8ad 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fb9c 	bl	80029f0 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002be:	f000 f897 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002c2:	2310      	movs	r3, #16
 80002c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002c6:	2300      	movs	r3, #0
 80002c8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 fcf5 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d8:	f000 f88a 	bl	80003f0 <Error_Handler>
  }
}
 80002dc:	bf00      	nop
 80002de:	3750      	adds	r7, #80	; 0x50
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <MX_GPIO_Init+0x90>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <MX_GPIO_Init+0x90>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <MX_GPIO_Init+0x90>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a17      	ldr	r2, [pc, #92]	; (8000374 <MX_GPIO_Init+0x90>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_GPIO_Init+0x90>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_GPIO_Init+0x90>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <MX_GPIO_Init+0x90>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_GPIO_Init+0x90>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000346:	480c      	ldr	r0, [pc, #48]	; (8000378 <MX_GPIO_Init+0x94>)
 8000348:	f000 fbdc 	bl	8000b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800034c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_GPIO_Init+0x94>)
 8000366:	f000 fa49 	bl	80007fc <HAL_GPIO_Init>

}
 800036a:	bf00      	nop
 800036c:	3720      	adds	r7, #32
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000
 8000378:	40011000 	.word	0x40011000

0800037c <led1blink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_led1blink */
void led1blink(void const * argument)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000384:	f008 f8ac 	bl	80084e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000388:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <led1blink+0x20>)
 800038e:	f000 fbd1 	bl	8000b34 <HAL_GPIO_TogglePin>
    osDelay(201);
 8000392:	20c9      	movs	r0, #201	; 0xc9
 8000394:	f006 feed 	bl	8007172 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000398:	e7f6      	b.n	8000388 <led1blink+0xc>
 800039a:	bf00      	nop
 800039c:	40011000 	.word	0x40011000

080003a0 <led2blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led2blink */
void led2blink(void const * argument)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led2blink */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80003a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ac:	4803      	ldr	r0, [pc, #12]	; (80003bc <led2blink+0x1c>)
 80003ae:	f000 fbc1 	bl	8000b34 <HAL_GPIO_TogglePin>
    osDelay(581);
 80003b2:	f240 2045 	movw	r0, #581	; 0x245
 80003b6:	f006 fedc 	bl	8007172 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80003ba:	e7f5      	b.n	80003a8 <led2blink+0x8>
 80003bc:	40011000 	.word	0x40011000

080003c0 <usbcomm_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbcomm_func */
void usbcomm_func(void const * argument)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usbcomm_func */
  /* Infinite loop */
  for(;;)
  {
	  CDC_Transmit_FS((uint8_t *) data, strlen(data));
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <usbcomm_func+0x2c>)
 80003ca:	681c      	ldr	r4, [r3, #0]
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <usbcomm_func+0x2c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff febd 	bl	8000150 <strlen>
 80003d6:	4603      	mov	r3, r0
 80003d8:	b29b      	uxth	r3, r3
 80003da:	4619      	mov	r1, r3
 80003dc:	4620      	mov	r0, r4
 80003de:	f008 f93d 	bl	800865c <CDC_Transmit_FS>
    osDelay(1000);
 80003e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e6:	f006 fec4 	bl	8007172 <osDelay>
	  CDC_Transmit_FS((uint8_t *) data, strlen(data));
 80003ea:	e7ed      	b.n	80003c8 <usbcomm_func+0x8>
 80003ec:	20000000 	.word	0x20000000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <HAL_MspInit+0x68>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a17      	ldr	r2, [pc, #92]	; (8000464 <HAL_MspInit+0x68>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <HAL_MspInit+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <HAL_MspInit+0x68>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <HAL_MspInit+0x68>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <HAL_MspInit+0x68>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	210f      	movs	r1, #15
 8000436:	f06f 0001 	mvn.w	r0, #1
 800043a:	f000 f9a8 	bl	800078e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <HAL_MspInit+0x6c>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <HAL_MspInit+0x6c>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40010000 	.word	0x40010000

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <NMI_Handler+0x4>

08000472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <MemManage_Handler+0x4>

0800047e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <UsageFault_Handler+0x4>

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049a:	f000 f885 	bl	80005a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800049e:	f007 fc13 	bl	8007cc8 <xTaskGetSchedulerState>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d001      	beq.n	80004ac <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004a8:	f007 fdfe 	bl	80080a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004b6:	f000 fc87 	bl	8000dc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20001eac 	.word	0x20001eac

080004c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	; (8000508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	; (8000514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004f6:	f7ff ffe5 	bl	80004c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f008 fc8d 	bl	8008e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fe:	f7ff fe47 	bl	8000190 <main>
  bx lr
 8000502:	4770      	bx	lr
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800050c:	08009168 	.word	0x08009168
  ldr r2, =_sbss
 8000510:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000514:	200023c0 	.word	0x200023c0

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x28>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x28>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f923 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	200f      	movs	r0, #15
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f7ff ff60 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f93b 	bl	80007e2 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f903 	bl	800078e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000004 	.word	0x20000004
 80005a0:	2000000c 	.word	0x2000000c
 80005a4:	20000008 	.word	0x20000008

080005a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_IncTick+0x1c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_IncTick+0x20>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <HAL_IncTick+0x20>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	2000000c 	.word	0x2000000c
 80005c8:	200004c4 	.word	0x200004c4

080005cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <HAL_GetTick+0x10>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	200004c4 	.word	0x200004c4

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 021f 	and.w	r2, r3, #31
 800065c:	4906      	ldr	r1, [pc, #24]	; (8000678 <__NVIC_EnableIRQ+0x34>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db0a      	blt.n	80006a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a4:	e00a      	b.n	80006bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4908      	ldr	r1, [pc, #32]	; (80006cc <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	0112      	lsls	r2, r2, #4
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	761a      	strb	r2, [r3, #24]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 32ff 	mov.w	r2, #4294967295
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43da      	mvns	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43d9      	mvns	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000744:	d301      	bcc.n	800074a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000746:	2301      	movs	r3, #1
 8000748:	e00f      	b.n	800076a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SysTick_Config+0x40>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000752:	210f      	movs	r1, #15
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f7ff ff90 	bl	800067c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SysTick_Config+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SysTick_Config+0x40>)
 8000764:	2207      	movs	r2, #7
 8000766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010

08000778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff2d 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a0:	f7ff ff42 	bl	8000628 <__NVIC_GetPriorityGrouping>
 80007a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	6978      	ldr	r0, [r7, #20]
 80007ac:	f7ff ff90 	bl	80006d0 <NVIC_EncodePriority>
 80007b0:	4602      	mov	r2, r0
 80007b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff5f 	bl	800067c <__NVIC_SetPriority>
}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff35 	bl	8000644 <__NVIC_EnableIRQ>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffa2 	bl	8000734 <SysTick_Config>
 80007f0:	4603      	mov	r3, r0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b08b      	sub	sp, #44	; 0x2c
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080e:	e169      	b.n	8000ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000810:	2201      	movs	r2, #1
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	69fa      	ldr	r2, [r7, #28]
 8000820:	4013      	ands	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	429a      	cmp	r2, r3
 800082a:	f040 8158 	bne.w	8000ade <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4a9a      	ldr	r2, [pc, #616]	; (8000a9c <HAL_GPIO_Init+0x2a0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d05e      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000838:	4a98      	ldr	r2, [pc, #608]	; (8000a9c <HAL_GPIO_Init+0x2a0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d875      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800083e:	4a98      	ldr	r2, [pc, #608]	; (8000aa0 <HAL_GPIO_Init+0x2a4>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d058      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000844:	4a96      	ldr	r2, [pc, #600]	; (8000aa0 <HAL_GPIO_Init+0x2a4>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d86f      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800084a:	4a96      	ldr	r2, [pc, #600]	; (8000aa4 <HAL_GPIO_Init+0x2a8>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d052      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000850:	4a94      	ldr	r2, [pc, #592]	; (8000aa4 <HAL_GPIO_Init+0x2a8>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d869      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000856:	4a94      	ldr	r2, [pc, #592]	; (8000aa8 <HAL_GPIO_Init+0x2ac>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d04c      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 800085c:	4a92      	ldr	r2, [pc, #584]	; (8000aa8 <HAL_GPIO_Init+0x2ac>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d863      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000862:	4a92      	ldr	r2, [pc, #584]	; (8000aac <HAL_GPIO_Init+0x2b0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d046      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000868:	4a90      	ldr	r2, [pc, #576]	; (8000aac <HAL_GPIO_Init+0x2b0>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d85d      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800086e:	2b12      	cmp	r3, #18
 8000870:	d82a      	bhi.n	80008c8 <HAL_GPIO_Init+0xcc>
 8000872:	2b12      	cmp	r3, #18
 8000874:	d859      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000876:	a201      	add	r2, pc, #4	; (adr r2, 800087c <HAL_GPIO_Init+0x80>)
 8000878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087c:	080008f7 	.word	0x080008f7
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008e3 	.word	0x080008e3
 8000888:	08000925 	.word	0x08000925
 800088c:	0800092b 	.word	0x0800092b
 8000890:	0800092b 	.word	0x0800092b
 8000894:	0800092b 	.word	0x0800092b
 8000898:	0800092b 	.word	0x0800092b
 800089c:	0800092b 	.word	0x0800092b
 80008a0:	0800092b 	.word	0x0800092b
 80008a4:	0800092b 	.word	0x0800092b
 80008a8:	0800092b 	.word	0x0800092b
 80008ac:	0800092b 	.word	0x0800092b
 80008b0:	0800092b 	.word	0x0800092b
 80008b4:	0800092b 	.word	0x0800092b
 80008b8:	0800092b 	.word	0x0800092b
 80008bc:	0800092b 	.word	0x0800092b
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008ed 	.word	0x080008ed
 80008c8:	4a79      	ldr	r2, [pc, #484]	; (8000ab0 <HAL_GPIO_Init+0x2b4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d013      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ce:	e02c      	b.n	800092a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	623b      	str	r3, [r7, #32]
          break;
 80008d6:	e029      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	3304      	adds	r3, #4
 80008de:	623b      	str	r3, [r7, #32]
          break;
 80008e0:	e024      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	3308      	adds	r3, #8
 80008e8:	623b      	str	r3, [r7, #32]
          break;
 80008ea:	e01f      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	330c      	adds	r3, #12
 80008f2:	623b      	str	r3, [r7, #32]
          break;
 80008f4:	e01a      	b.n	800092c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d102      	bne.n	8000904 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008fe:	2304      	movs	r3, #4
 8000900:	623b      	str	r3, [r7, #32]
          break;
 8000902:	e013      	b.n	800092c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d105      	bne.n	8000918 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800090c:	2308      	movs	r3, #8
 800090e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	611a      	str	r2, [r3, #16]
          break;
 8000916:	e009      	b.n	800092c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000918:	2308      	movs	r3, #8
 800091a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	615a      	str	r2, [r3, #20]
          break;
 8000922:	e003      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e000      	b.n	800092c <HAL_GPIO_Init+0x130>
          break;
 800092a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	2bff      	cmp	r3, #255	; 0xff
 8000930:	d801      	bhi.n	8000936 <HAL_GPIO_Init+0x13a>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	e001      	b.n	800093a <HAL_GPIO_Init+0x13e>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3304      	adds	r3, #4
 800093a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2bff      	cmp	r3, #255	; 0xff
 8000940:	d802      	bhi.n	8000948 <HAL_GPIO_Init+0x14c>
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	e002      	b.n	800094e <HAL_GPIO_Init+0x152>
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	3b08      	subs	r3, #8
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	210f      	movs	r1, #15
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	401a      	ands	r2, r3
 8000960:	6a39      	ldr	r1, [r7, #32]
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	fa01 f303 	lsl.w	r3, r1, r3
 8000968:	431a      	orrs	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	2b00      	cmp	r3, #0
 8000978:	f000 80b1 	beq.w	8000ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800097c:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <HAL_GPIO_Init+0x2b8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a4c      	ldr	r2, [pc, #304]	; (8000ab4 <HAL_GPIO_Init+0x2b8>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <HAL_GPIO_Init+0x2b8>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000994:	4a48      	ldr	r2, [pc, #288]	; (8000ab8 <HAL_GPIO_Init+0x2bc>)
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3302      	adds	r3, #2
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	220f      	movs	r2, #15
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a40      	ldr	r2, [pc, #256]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d013      	beq.n	80009e8 <HAL_GPIO_Init+0x1ec>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a3f      	ldr	r2, [pc, #252]	; (8000ac0 <HAL_GPIO_Init+0x2c4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d00d      	beq.n	80009e4 <HAL_GPIO_Init+0x1e8>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a3e      	ldr	r2, [pc, #248]	; (8000ac4 <HAL_GPIO_Init+0x2c8>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d007      	beq.n	80009e0 <HAL_GPIO_Init+0x1e4>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a3d      	ldr	r2, [pc, #244]	; (8000ac8 <HAL_GPIO_Init+0x2cc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d101      	bne.n	80009dc <HAL_GPIO_Init+0x1e0>
 80009d8:	2303      	movs	r3, #3
 80009da:	e006      	b.n	80009ea <HAL_GPIO_Init+0x1ee>
 80009dc:	2304      	movs	r3, #4
 80009de:	e004      	b.n	80009ea <HAL_GPIO_Init+0x1ee>
 80009e0:	2302      	movs	r3, #2
 80009e2:	e002      	b.n	80009ea <HAL_GPIO_Init+0x1ee>
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <HAL_GPIO_Init+0x1ee>
 80009e8:	2300      	movs	r3, #0
 80009ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ec:	f002 0203 	and.w	r2, r2, #3
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	4093      	lsls	r3, r2
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009fa:	492f      	ldr	r1, [pc, #188]	; (8000ab8 <HAL_GPIO_Init+0x2bc>)
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3302      	adds	r3, #2
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d006      	beq.n	8000a22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	492c      	ldr	r1, [pc, #176]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	600b      	str	r3, [r1, #0]
 8000a20:	e006      	b.n	8000a30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	4928      	ldr	r1, [pc, #160]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d006      	beq.n	8000a4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4922      	ldr	r1, [pc, #136]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
 8000a48:	e006      	b.n	8000a58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	491e      	ldr	r1, [pc, #120]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	4918      	ldr	r1, [pc, #96]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	608b      	str	r3, [r1, #8]
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	4914      	ldr	r1, [pc, #80]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d021      	beq.n	8000ad0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	490e      	ldr	r1, [pc, #56]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60cb      	str	r3, [r1, #12]
 8000a98:	e021      	b.n	8000ade <HAL_GPIO_Init+0x2e2>
 8000a9a:	bf00      	nop
 8000a9c:	10320000 	.word	0x10320000
 8000aa0:	10310000 	.word	0x10310000
 8000aa4:	10220000 	.word	0x10220000
 8000aa8:	10210000 	.word	0x10210000
 8000aac:	10120000 	.word	0x10120000
 8000ab0:	10110000 	.word	0x10110000
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40011400 	.word	0x40011400
 8000acc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_GPIO_Init+0x304>)
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4909      	ldr	r1, [pc, #36]	; (8000b00 <HAL_GPIO_Init+0x304>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	fa22 f303 	lsr.w	r3, r2, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f47f ae8e 	bne.w	8000810 <HAL_GPIO_Init+0x14>
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	372c      	adds	r7, #44	; 0x2c
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40010400 	.word	0x40010400

08000b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
 8000b10:	4613      	mov	r3, r2
 8000b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b14:	787b      	ldrb	r3, [r7, #1]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b1a:	887a      	ldrh	r2, [r7, #2]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b20:	e003      	b.n	8000b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	041a      	lsls	r2, r3, #16
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	611a      	str	r2, [r3, #16]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	041a      	lsls	r2, r3, #16
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43d9      	mvns	r1, r3
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	400b      	ands	r3, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	611a      	str	r2, [r3, #16]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b68:	b08b      	sub	sp, #44	; 0x2c
 8000b6a:	af06      	add	r7, sp, #24
 8000b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e0fd      	b.n	8000d74 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f007 fe99 	bl	80088c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f968 	bl	8002e74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	687e      	ldr	r6, [r7, #4]
 8000bac:	466d      	mov	r5, sp
 8000bae:	f106 0410 	add.w	r4, r6, #16
 8000bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	602b      	str	r3, [r5, #0]
 8000bba:	1d33      	adds	r3, r6, #4
 8000bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bbe:	6838      	ldr	r0, [r7, #0]
 8000bc0:	f002 f932 	bl	8002e28 <USB_CoreInit>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d005      	beq.n	8000bd6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2202      	movs	r2, #2
 8000bce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e0ce      	b.n	8000d74 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 f963 	bl	8002ea8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e04c      	b.n	8000c82 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	440b      	add	r3, r1
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	440b      	add	r3, r1
 8000c0e:	7bfa      	ldrb	r2, [r7, #15]
 8000c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c12:	7bfa      	ldrb	r2, [r7, #15]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	b298      	uxth	r0, r3
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	3336      	adds	r3, #54	; 0x36
 8000c26:	4602      	mov	r2, r0
 8000c28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	440b      	add	r3, r1
 8000c3a:	3303      	adds	r3, #3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	440b      	add	r3, r1
 8000c4e:	3338      	adds	r3, #56	; 0x38
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	333c      	adds	r3, #60	; 0x3c
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	440b      	add	r3, r1
 8000c76:	3340      	adds	r3, #64	; 0x40
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d3ad      	bcc.n	8000be8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e044      	b.n	8000d1c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3b5      	bcc.n	8000c92 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	687e      	ldr	r6, [r7, #4]
 8000d2e:	466d      	mov	r5, sp
 8000d30:	f106 0410 	add.w	r4, r6, #16
 8000d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	602b      	str	r3, [r5, #0]
 8000d3c:	1d33      	adds	r3, r6, #4
 8000d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d40:	6838      	ldr	r0, [r7, #0]
 8000d42:	f002 f8bd 	bl	8002ec0 <USB_DevInit>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d005      	beq.n	8000d58 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2202      	movs	r2, #2
 8000d50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e00d      	b.n	8000d74 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fd6f 	bl	8005850 <USB_DevDisconnect>

  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d101      	bne.n	8000d92 <HAL_PCD_Start+0x16>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e016      	b.n	8000dc0 <HAL_PCD_Start+0x44>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 f852 	bl	8002e48 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000da4:	2101      	movs	r1, #1
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f007 ffff 	bl	8008daa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 fd43 	bl	800583c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fd45 	bl	8005864 <USB_ReadInterrupts>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000de4:	d102      	bne.n	8000dec <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 fb5f 	bl	80014aa <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 fd37 	bl	8005864 <USB_ReadInterrupts>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e00:	d112      	bne.n	8000e28 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e14:	b292      	uxth	r2, r2
 8000e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f007 fdcd 	bl	80089ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e20:	2100      	movs	r1, #0
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f923 	bl	800106e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fd19 	bl	8005864 <USB_ReadInterrupts>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e3c:	d10b      	bne.n	8000e56 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e50:	b292      	uxth	r2, r2
 8000e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 fd02 	bl	8005864 <USB_ReadInterrupts>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e6a:	d10b      	bne.n	8000e84 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 fceb 	bl	8005864 <USB_ReadInterrupts>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e98:	d126      	bne.n	8000ee8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0204 	bic.w	r2, r2, #4
 8000eac:	b292      	uxth	r2, r2
 8000eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0208 	bic.w	r2, r2, #8
 8000ec4:	b292      	uxth	r2, r2
 8000ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f007 fdae 	bl	8008a2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fcb9 	bl	8005864 <USB_ReadInterrupts>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000efc:	f040 8082 	bne.w	8001004 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	77fb      	strb	r3, [r7, #31]
 8000f04:	e010      	b.n	8000f28 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	7ffb      	ldrb	r3, [r7, #31]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	441a      	add	r2, r3
 8000f12:	7ffb      	ldrb	r3, [r7, #31]
 8000f14:	8812      	ldrh	r2, [r2, #0]
 8000f16:	b292      	uxth	r2, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	3320      	adds	r3, #32
 8000f1c:	443b      	add	r3, r7
 8000f1e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000f22:	7ffb      	ldrb	r3, [r7, #31]
 8000f24:	3301      	adds	r3, #1
 8000f26:	77fb      	strb	r3, [r7, #31]
 8000f28:	7ffb      	ldrb	r3, [r7, #31]
 8000f2a:	2b07      	cmp	r3, #7
 8000f2c:	d9eb      	bls.n	8000f06 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f042 0201 	orr.w	r2, r2, #1
 8000f40:	b292      	uxth	r2, r2
 8000f42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	b292      	uxth	r2, r2
 8000f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f5e:	bf00      	nop
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f6      	beq.n	8000f60 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f84:	b292      	uxth	r2, r2
 8000f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	77fb      	strb	r3, [r7, #31]
 8000f8e:	e00f      	b.n	8000fb0 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f90:	7ffb      	ldrb	r3, [r7, #31]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	4611      	mov	r1, r2
 8000f98:	7ffa      	ldrb	r2, [r7, #31]
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	440a      	add	r2, r1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	3320      	adds	r3, #32
 8000fa2:	443b      	add	r3, r7
 8000fa4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fa8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000faa:	7ffb      	ldrb	r3, [r7, #31]
 8000fac:	3301      	adds	r3, #1
 8000fae:	77fb      	strb	r3, [r7, #31]
 8000fb0:	7ffb      	ldrb	r3, [r7, #31]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	d9ec      	bls.n	8000f90 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0208 	orr.w	r2, r2, #8
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fe0:	b292      	uxth	r2, r2
 8000fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0204 	orr.w	r2, r2, #4
 8000ff8:	b292      	uxth	r2, r2
 8000ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f007 fcfa 	bl	80089f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fc2b 	bl	8005864 <USB_ReadInterrupts>
 800100e:	4603      	mov	r3, r0
 8001010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001018:	d10e      	bne.n	8001038 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800102c:	b292      	uxth	r2, r2
 800102e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f007 fcb3 	bl	800899e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f004 fc11 	bl	8005864 <USB_ReadInterrupts>
 8001042:	4603      	mov	r3, r0
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800104c:	d10b      	bne.n	8001066 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001060:	b292      	uxth	r2, r2
 8001062:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_PCD_SetAddress+0x1a>
 8001084:	2302      	movs	r3, #2
 8001086:	e013      	b.n	80010b0 <HAL_PCD_SetAddress+0x42>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	78fa      	ldrb	r2, [r7, #3]
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fbb8 	bl	8005816 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4608      	mov	r0, r1
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	70fb      	strb	r3, [r7, #3]
 80010ca:	460b      	mov	r3, r1
 80010cc:	803b      	strh	r3, [r7, #0]
 80010ce:	4613      	mov	r3, r2
 80010d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da0e      	bge.n	80010fc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	705a      	strb	r2, [r3, #1]
 80010fa:	e00e      	b.n	800111a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	f003 0207 	and.w	r2, r3, #7
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	b2da      	uxtb	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001126:	883a      	ldrh	r2, [r7, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	78ba      	ldrb	r2, [r7, #2]
 8001130:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b29a      	uxth	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001144:	78bb      	ldrb	r3, [r7, #2]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d102      	bne.n	8001150 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001156:	2b01      	cmp	r3, #1
 8001158:	d101      	bne.n	800115e <HAL_PCD_EP_Open+0xa6>
 800115a:	2302      	movs	r3, #2
 800115c:	e00e      	b.n	800117c <HAL_PCD_EP_Open+0xc4>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fec7 	bl	8002f00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800117a:	7afb      	ldrb	r3, [r7, #11]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001194:	2b00      	cmp	r3, #0
 8001196:	da0e      	bge.n	80011b6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2201      	movs	r2, #1
 80011b2:	705a      	strb	r2, [r3, #1]
 80011b4:	e00e      	b.n	80011d4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	f003 0207 	and.w	r2, r3, #7
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_PCD_EP_Close+0x6a>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e00e      	b.n	800120c <HAL_PCD_EP_Close+0x88>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68f9      	ldr	r1, [r7, #12]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 f9e9 	bl	80035d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	460b      	mov	r3, r1
 8001222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	f003 0207 	and.w	r2, r3, #7
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2200      	movs	r2, #0
 8001252:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	b2da      	uxtb	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	2b00      	cmp	r3, #0
 8001268:	d106      	bne.n	8001278 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6979      	ldr	r1, [r7, #20]
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fb9b 	bl	80039ac <USB_EPStartXfer>
 8001276:	e005      	b.n	8001284 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6979      	ldr	r1, [r7, #20]
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fb94 	bl	80039ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	f003 0207 	and.w	r2, r3, #7
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80012b0:	681b      	ldr	r3, [r3, #0]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	460b      	mov	r3, r1
 80012ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2201      	movs	r2, #1
 8001306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	b2da      	uxtb	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6979      	ldr	r1, [r7, #20]
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fb41 	bl	80039ac <USB_EPStartXfer>
 800132a:	e005      	b.n	8001338 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6979      	ldr	r1, [r7, #20]
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fb3a 	bl	80039ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0207 	and.w	r2, r3, #7
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	d901      	bls.n	8001360 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e04c      	b.n	80013fa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da0e      	bge.n	8001386 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2201      	movs	r2, #1
 8001382:	705a      	strb	r2, [r3, #1]
 8001384:	e00c      	b.n	80013a0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001386:	78fa      	ldrb	r2, [r7, #3]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_PCD_EP_SetStall+0x7e>
 80013bc:	2302      	movs	r3, #2
 80013be:	e01c      	b.n	80013fa <HAL_PCD_EP_SetStall+0xb8>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68f9      	ldr	r1, [r7, #12]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 f924 	bl	800561c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f004 fa49 	bl	8005882 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	f003 020f 	and.w	r2, r3, #15
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d901      	bls.n	8001420 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e040      	b.n	80014a2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001424:	2b00      	cmp	r3, #0
 8001426:	da0e      	bge.n	8001446 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2201      	movs	r2, #1
 8001442:	705a      	strb	r2, [r3, #1]
 8001444:	e00e      	b.n	8001464 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	f003 0207 	and.w	r2, r3, #7
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	b2da      	uxtb	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_PCD_EP_ClrStall+0x82>
 8001480:	2302      	movs	r3, #2
 8001482:	e00e      	b.n	80014a2 <HAL_PCD_EP_ClrStall+0xa0>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68f9      	ldr	r1, [r7, #12]
 8001492:	4618      	mov	r0, r3
 8001494:	f004 f912 	bl	80056bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b08e      	sub	sp, #56	; 0x38
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014b2:	e2ec      	b.n	8001a8e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014bc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80014be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80014ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 8161 	bne.w	8001796 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d152      	bne.n	8001584 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ee:	81fb      	strh	r3, [r7, #14]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014fe:	b29b      	uxth	r3, r3
 8001500:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3328      	adds	r3, #40	; 0x28
 8001506:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	3302      	adds	r3, #2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	441a      	add	r2, r3
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001542:	2100      	movs	r1, #0
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f007 fa10 	bl	800896a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 829b 	beq.w	8001a8e <PCD_EP_ISR_Handler+0x5e4>
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2b00      	cmp	r3, #0
 800155e:	f040 8296 	bne.w	8001a8e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800156e:	b2da      	uxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b292      	uxth	r2, r2
 8001576:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001582:	e284      	b.n	8001a8e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001594:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159a:	2b00      	cmp	r3, #0
 800159c:	d034      	beq.n	8001608 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	3306      	adds	r3, #6
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015dc:	b29b      	uxth	r3, r3
 80015de:	f004 f9a0 	bl	8005922 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015ee:	4013      	ands	r3, r2
 80015f0:	823b      	strh	r3, [r7, #16]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	8a3a      	ldrh	r2, [r7, #16]
 80015f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015fc:	b292      	uxth	r2, r2
 80015fe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f007 f985 	bl	8008910 <HAL_PCD_SetupStageCallback>
 8001606:	e242      	b.n	8001a8e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001608:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800160c:	2b00      	cmp	r3, #0
 800160e:	f280 823e 	bge.w	8001a8e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29a      	uxth	r2, r3
 800161a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800161e:	4013      	ands	r3, r2
 8001620:	83bb      	strh	r3, [r7, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	8bba      	ldrh	r2, [r7, #28]
 8001628:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800162c:	b292      	uxth	r2, r2
 800162e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001638:	b29b      	uxth	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	3306      	adds	r3, #6
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	4413      	add	r3, r2
 800164e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d019      	beq.n	8001698 <PCD_EP_ISR_Handler+0x1ee>
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	6959      	ldr	r1, [r3, #20]
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800167c:	b29b      	uxth	r3, r3
 800167e:	f004 f950 	bl	8005922 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	441a      	add	r2, r3
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f007 f94e 	bl	8008934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 81f2 	bne.w	8001a8e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	4413      	add	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d112      	bne.n	80016f8 <PCD_EP_ISR_Handler+0x24e>
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80016dc:	b29a      	uxth	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	e02f      	b.n	8001758 <PCD_EP_ISR_Handler+0x2ae>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b3e      	cmp	r3, #62	; 0x3e
 80016fe:	d813      	bhi.n	8001728 <PCD_EP_ISR_Handler+0x27e>
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <PCD_EP_ISR_Handler+0x270>
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	3301      	adds	r3, #1
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
 800171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171c:	b29b      	uxth	r3, r3
 800171e:	029b      	lsls	r3, r3, #10
 8001720:	b29a      	uxth	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	e017      	b.n	8001758 <PCD_EP_ISR_Handler+0x2ae>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <PCD_EP_ISR_Handler+0x298>
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	3b01      	subs	r3, #1
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	b29b      	uxth	r3, r3
 8001746:	029b      	lsls	r3, r3, #10
 8001748:	b29b      	uxth	r3, r3
 800174a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800174e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001752:	b29a      	uxth	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001768:	827b      	strh	r3, [r7, #18]
 800176a:	8a7b      	ldrh	r3, [r7, #18]
 800176c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001770:	827b      	strh	r3, [r7, #18]
 8001772:	8a7b      	ldrh	r3, [r7, #18]
 8001774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001778:	827b      	strh	r3, [r7, #18]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	8a7b      	ldrh	r3, [r7, #18]
 8001780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	b29b      	uxth	r3, r3
 8001792:	8013      	strh	r3, [r2, #0]
 8001794:	e17b      	b.n	8001a8e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f280 80ea 	bge.w	8001986 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017c8:	4013      	ands	r3, r2
 80017ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e0:	b292      	uxth	r2, r2
 80017e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80017e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d122      	bne.n	8001848 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800180a:	b29b      	uxth	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	3306      	adds	r3, #6
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800182a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800182c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8087 	beq.w	8001942 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	6959      	ldr	r1, [r3, #20]
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	88da      	ldrh	r2, [r3, #6]
 8001840:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001842:	f004 f86e 	bl	8005922 <USB_ReadPMA>
 8001846:	e07c      	b.n	8001942 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d108      	bne.n	8001862 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001852:	461a      	mov	r2, r3
 8001854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f927 	bl	8001aaa <HAL_PCD_EP_DB_Receive>
 800185c:	4603      	mov	r3, r0
 800185e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001860:	e06f      	b.n	8001942 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800187c:	847b      	strh	r3, [r7, #34]	; 0x22
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	441a      	add	r2, r3
 800188c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800188e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800189e:	b29b      	uxth	r3, r3
 80018a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d021      	beq.n	8001900 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	3302      	adds	r3, #2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018e4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d02a      	beq.n	8001942 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	6959      	ldr	r1, [r3, #20]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	891a      	ldrh	r2, [r3, #8]
 80018f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018fa:	f004 f812 	bl	8005922 <USB_ReadPMA>
 80018fe:	e020      	b.n	8001942 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001908:	b29b      	uxth	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	3306      	adds	r3, #6
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001928:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800192a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	6959      	ldr	r1, [r3, #20]
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	895a      	ldrh	r2, [r3, #10]
 800193c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800193e:	f003 fff0 	bl	8005922 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001948:	441a      	add	r2, r3
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001954:	441a      	add	r2, r3
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <PCD_EP_ISR_Handler+0x4c2>
 8001962:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d206      	bcs.n	800197a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f006 ffde 	bl	8008934 <HAL_PCD_DataOutStageCallback>
 8001978:	e005      	b.n	8001986 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001980:	4618      	mov	r0, r3
 8001982:	f002 f813 	bl	80039ac <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001986:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	2b00      	cmp	r3, #0
 800198e:	d07e      	beq.n	8001a8e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001990:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019be:	843b      	strh	r3, [r7, #32]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	441a      	add	r2, r3
 80019ce:	8c3b      	ldrh	r3, [r7, #32]
 80019d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d8:	b29b      	uxth	r3, r3
 80019da:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	78db      	ldrb	r3, [r3, #3]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d00c      	beq.n	80019fe <PCD_EP_ISR_Handler+0x554>
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	78db      	ldrb	r3, [r3, #3]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d146      	bne.n	8001a82 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d141      	bne.n	8001a82 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	3302      	adds	r3, #2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a26:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	699a      	ldr	r2, [r3, #24]
 8001a2c:	8bfb      	ldrh	r3, [r7, #30]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d906      	bls.n	8001a40 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	1ad2      	subs	r2, r2, r3
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	619a      	str	r2, [r3, #24]
 8001a3e:	e002      	b.n	8001a46 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f006 ff88 	bl	800896a <HAL_PCD_DataInStageCallback>
 8001a5a:	e018      	b.n	8001a8e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	8bfb      	ldrh	r3, [r7, #30]
 8001a62:	441a      	add	r2, r3
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	8bfb      	ldrh	r3, [r7, #30]
 8001a6e:	441a      	add	r2, r3
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 ff96 	bl	80039ac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a80:	e005      	b.n	8001a8e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a84:	461a      	mov	r2, r3
 8001a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f91b 	bl	8001cc4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f6ff ad0a 	blt.w	80014b4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3738      	adds	r7, #56	; 0x38
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b088      	sub	sp, #32
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d07e      	beq.n	8001bc0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	8b7b      	ldrh	r3, [r7, #26]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d306      	bcc.n	8001b04 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	8b7b      	ldrh	r3, [r7, #26]
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	619a      	str	r2, [r3, #24]
 8001b02:	e002      	b.n	8001b0a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d123      	bne.n	8001b5a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2c:	833b      	strh	r3, [r7, #24]
 8001b2e:	8b3b      	ldrh	r3, [r7, #24]
 8001b30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b34:	833b      	strh	r3, [r7, #24]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	441a      	add	r2, r3
 8001b44:	8b3b      	ldrh	r3, [r7, #24]
 8001b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01f      	beq.n	8001ba4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b7e:	82fb      	strh	r3, [r7, #22]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	441a      	add	r2, r3
 8001b8e:	8afb      	ldrh	r3, [r7, #22]
 8001b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ba4:	8b7b      	ldrh	r3, [r7, #26]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8087 	beq.w	8001cba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	6959      	ldr	r1, [r3, #20]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	891a      	ldrh	r2, [r3, #8]
 8001bb8:	8b7b      	ldrh	r3, [r7, #26]
 8001bba:	f003 feb2 	bl	8005922 <USB_ReadPMA>
 8001bbe:	e07c      	b.n	8001cba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3306      	adds	r3, #6
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	8b7b      	ldrh	r3, [r7, #26]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d306      	bcc.n	8001c02 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	8b7b      	ldrh	r3, [r7, #26]
 8001bfa:	1ad2      	subs	r2, r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	e002      	b.n	8001c08 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d123      	bne.n	8001c58 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2a:	83fb      	strh	r3, [r7, #30]
 8001c2c:	8bfb      	ldrh	r3, [r7, #30]
 8001c2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c32:	83fb      	strh	r3, [r7, #30]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	441a      	add	r2, r3
 8001c42:	8bfb      	ldrh	r3, [r7, #30]
 8001c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11f      	bne.n	8001ca2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7c:	83bb      	strh	r3, [r7, #28]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	441a      	add	r2, r3
 8001c8c:	8bbb      	ldrh	r3, [r7, #28]
 8001c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ca2:	8b7b      	ldrh	r3, [r7, #26]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	6959      	ldr	r1, [r3, #20]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	895a      	ldrh	r2, [r3, #10]
 8001cb4:	8b7b      	ldrh	r3, [r7, #26]
 8001cb6:	f003 fe34 	bl	8005922 <USB_ReadPMA>
    }
  }

  return count;
 8001cba:	8b7b      	ldrh	r3, [r7, #26]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0a2      	sub	sp, #136	; 0x88
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 81c7 	beq.w	800206c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d907      	bls.n	8001d26 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d1e:	1ad2      	subs	r2, r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	e002      	b.n	8001d2c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 80b9 	bne.w	8001ea8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d126      	bne.n	8001d8c <HAL_PCD_EP_DB_Transmit+0xc8>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	4413      	add	r3, r2
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	011a      	lsls	r2, r3, #4
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	4413      	add	r3, r2
 8001d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	801a      	strh	r2, [r3, #0]
 8001d8a:	e01a      	b.n	8001dc2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	785b      	ldrb	r3, [r3, #1]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d116      	bne.n	8001dc2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	4413      	add	r3, r2
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	011a      	lsls	r2, r3, #4
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	4413      	add	r3, r2
 8001db6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d126      	bne.n	8001e1e <HAL_PCD_EP_DB_Transmit+0x15a>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4413      	add	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	011a      	lsls	r2, r3, #4
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4413      	add	r3, r2
 8001df2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	801a      	strh	r2, [r3, #0]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	801a      	strh	r2, [r3, #0]
 8001e1c:	e017      	b.n	8001e4e <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	785b      	ldrb	r3, [r3, #1]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d113      	bne.n	8001e4e <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	4413      	add	r3, r2
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	011a      	lsls	r2, r3, #4
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	4413      	add	r3, r2
 8001e42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f006 fd88 	bl	800896a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 82d4 	beq.w	800240e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e80:	827b      	strh	r3, [r7, #18]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	441a      	add	r2, r3
 8001e90:	8a7b      	ldrh	r3, [r7, #18]
 8001e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	8013      	strh	r3, [r2, #0]
 8001ea6:	e2b2      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d021      	beq.n	8001ef6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ecc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	441a      	add	r2, r3
 8001ede:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f040 8286 	bne.w	800240e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f0a:	441a      	add	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f18:	441a      	add	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6a1a      	ldr	r2, [r3, #32]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d309      	bcc.n	8001f3e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f36:	1ad2      	subs	r2, r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	621a      	str	r2, [r3, #32]
 8001f3c:	e015      	b.n	8001f6a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001f46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f4a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f54:	e009      	b.n	8001f6a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d155      	bne.n	800201e <HAL_PCD_EP_DB_Transmit+0x35a>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f86:	4413      	add	r3, r2
 8001f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	011a      	lsls	r2, r3, #4
 8001f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f92:	4413      	add	r3, r2
 8001f94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d112      	bne.n	8001fc6 <HAL_PCD_EP_DB_Transmit+0x302>
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	801a      	strh	r2, [r3, #0]
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	e047      	b.n	8002056 <HAL_PCD_EP_DB_Transmit+0x392>
 8001fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc8:	2b3e      	cmp	r3, #62	; 0x3e
 8001fca:	d811      	bhi.n	8001ff0 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fde:	3301      	adds	r3, #1
 8001fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	e032      	b.n	8002056 <HAL_PCD_EP_DB_Transmit+0x392>
 8001ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <HAL_PCD_EP_DB_Transmit+0x342>
 8002000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002002:	3b01      	subs	r3, #1
 8002004:	64bb      	str	r3, [r7, #72]	; 0x48
 8002006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002008:	b29b      	uxth	r3, r3
 800200a:	029b      	lsls	r3, r3, #10
 800200c:	b29b      	uxth	r3, r3
 800200e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002016:	b29a      	uxth	r2, r3
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	801a      	strh	r2, [r3, #0]
 800201c:	e01b      	b.n	8002056 <HAL_PCD_EP_DB_Transmit+0x392>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d117      	bne.n	8002056 <HAL_PCD_EP_DB_Transmit+0x392>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	643b      	str	r3, [r7, #64]	; 0x40
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203a:	4413      	add	r3, r2
 800203c:	643b      	str	r3, [r7, #64]	; 0x40
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	011a      	lsls	r2, r3, #4
 8002044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002046:	4413      	add	r3, r2
 8002048:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002050:	b29a      	uxth	r2, r3
 8002052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002054:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6959      	ldr	r1, [r3, #20]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	891a      	ldrh	r2, [r3, #8]
 8002062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002064:	b29b      	uxth	r3, r3
 8002066:	f003 fc17 	bl	8005898 <USB_WritePMA>
 800206a:	e1d0      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	3306      	adds	r3, #6
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002094:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	699a      	ldr	r2, [r3, #24]
 800209c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d307      	bcc.n	80020b4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020ac:	1ad2      	subs	r2, r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	619a      	str	r2, [r3, #24]
 80020b2:	e002      	b.n	80020ba <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 80c4 	bne.w	800224c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d126      	bne.n	800211a <HAL_PCD_EP_DB_Transmit+0x456>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	4413      	add	r3, r2
 80020e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	011a      	lsls	r2, r3, #4
 80020ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ec:	4413      	add	r3, r2
 80020ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80020f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020fe:	b29a      	uxth	r2, r3
 8002100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800210e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002112:	b29a      	uxth	r2, r3
 8002114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	e01a      	b.n	8002150 <HAL_PCD_EP_DB_Transmit+0x48c>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d116      	bne.n	8002150 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	677b      	str	r3, [r7, #116]	; 0x74
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002130:	b29b      	uxth	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002136:	4413      	add	r3, r2
 8002138:	677b      	str	r3, [r7, #116]	; 0x74
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	011a      	lsls	r2, r3, #4
 8002140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002142:	4413      	add	r3, r2
 8002144:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002148:	673b      	str	r3, [r7, #112]	; 0x70
 800214a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800214c:	2200      	movs	r2, #0
 800214e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	67bb      	str	r3, [r7, #120]	; 0x78
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d12f      	bne.n	80021be <HAL_PCD_EP_DB_Transmit+0x4fa>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002176:	4413      	add	r3, r2
 8002178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	011a      	lsls	r2, r3, #4
 8002182:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002186:	4413      	add	r3, r2
 8002188:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800218c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800219c:	b29a      	uxth	r2, r3
 800219e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021ba:	801a      	strh	r2, [r3, #0]
 80021bc:	e017      	b.n	80021ee <HAL_PCD_EP_DB_Transmit+0x52a>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d113      	bne.n	80021ee <HAL_PCD_EP_DB_Transmit+0x52a>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d4:	4413      	add	r3, r2
 80021d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	011a      	lsls	r2, r3, #4
 80021de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e0:	4413      	add	r3, r2
 80021e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ea:	2200      	movs	r2, #0
 80021ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f006 fbb8 	bl	800896a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 8104 	bne.w	800240e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800221c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002220:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800223a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800223e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002246:	b29b      	uxth	r3, r3
 8002248:	8013      	strh	r3, [r2, #0]
 800224a:	e0e0      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d121      	bne.n	800229a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800226c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002270:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	441a      	add	r2, r3
 8002282:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800228a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800228e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002296:	b29b      	uxth	r3, r3
 8002298:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	f040 80b4 	bne.w	800240e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022ae:	441a      	add	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022bc:	441a      	add	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	6a1a      	ldr	r2, [r3, #32]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d309      	bcc.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	6a1a      	ldr	r2, [r3, #32]
 80022d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022da:	1ad2      	subs	r2, r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	621a      	str	r2, [r3, #32]
 80022e0:	e015      	b.n	800230e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d107      	bne.n	80022fa <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80022ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022f8:	e009      	b.n	800230e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2200      	movs	r2, #0
 8002304:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	667b      	str	r3, [r7, #100]	; 0x64
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	785b      	ldrb	r3, [r3, #1]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d155      	bne.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x704>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002330:	4413      	add	r3, r2
 8002332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	011a      	lsls	r2, r3, #4
 800233a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233c:	4413      	add	r3, r2
 800233e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002342:	65bb      	str	r3, [r7, #88]	; 0x58
 8002344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	d112      	bne.n	8002370 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800234a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002354:	b29a      	uxth	r2, r3
 8002356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002358:	801a      	strh	r2, [r3, #0]
 800235a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002368:	b29a      	uxth	r2, r3
 800236a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	e044      	b.n	80023fa <HAL_PCD_EP_DB_Transmit+0x736>
 8002370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002372:	2b3e      	cmp	r3, #62	; 0x3e
 8002374:	d811      	bhi.n	800239a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	657b      	str	r3, [r7, #84]	; 0x54
 800237c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002388:	3301      	adds	r3, #1
 800238a:	657b      	str	r3, [r7, #84]	; 0x54
 800238c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238e:	b29b      	uxth	r3, r3
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	b29a      	uxth	r2, r3
 8002394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	e02f      	b.n	80023fa <HAL_PCD_EP_DB_Transmit+0x736>
 800239a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	657b      	str	r3, [r7, #84]	; 0x54
 80023a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80023aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ac:	3b01      	subs	r3, #1
 80023ae:	657b      	str	r3, [r7, #84]	; 0x54
 80023b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	029b      	lsls	r3, r3, #10
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c4:	801a      	strh	r2, [r3, #0]
 80023c6:	e018      	b.n	80023fa <HAL_PCD_EP_DB_Transmit+0x736>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d114      	bne.n	80023fa <HAL_PCD_EP_DB_Transmit+0x736>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023de:	4413      	add	r3, r2
 80023e0:	667b      	str	r3, [r7, #100]	; 0x64
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	011a      	lsls	r2, r3, #4
 80023e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ea:	4413      	add	r3, r2
 80023ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023f0:	663b      	str	r3, [r7, #96]	; 0x60
 80023f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6959      	ldr	r1, [r3, #20]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	895a      	ldrh	r2, [r3, #10]
 8002406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002408:	b29b      	uxth	r3, r3
 800240a:	f003 fa45 	bl	8005898 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002428:	823b      	strh	r3, [r7, #16]
 800242a:	8a3b      	ldrh	r3, [r7, #16]
 800242c:	f083 0310 	eor.w	r3, r3, #16
 8002430:	823b      	strh	r3, [r7, #16]
 8002432:	8a3b      	ldrh	r3, [r7, #16]
 8002434:	f083 0320 	eor.w	r3, r3, #32
 8002438:	823b      	strh	r3, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	441a      	add	r2, r3
 8002448:	8a3b      	ldrh	r3, [r7, #16]
 800244a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800244e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245a:	b29b      	uxth	r3, r3
 800245c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3788      	adds	r7, #136	; 0x88
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	817b      	strh	r3, [r7, #10]
 8002476:	4613      	mov	r3, r2
 8002478:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800247a:	897b      	ldrh	r3, [r7, #10]
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002486:	897b      	ldrh	r3, [r7, #10]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e009      	b.n	80024b2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800249e:	897a      	ldrh	r2, [r7, #10]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80024b2:	893b      	ldrh	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2200      	movs	r2, #0
 80024bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	80da      	strh	r2, [r3, #6]
 80024c6:	e00b      	b.n	80024e0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2201      	movs	r2, #1
 80024cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	b29a      	uxth	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e272      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8087 	beq.w	800261a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00c      	beq.n	8002532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002518:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d112      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	4b89      	ldr	r3, [pc, #548]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06c      	beq.n	8002618 <HAL_RCC_OscConfig+0x12c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d168      	bne.n	8002618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e24c      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x76>
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7f      	ldr	r2, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e02e      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x98>
 800256a:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b78      	ldr	r3, [pc, #480]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a77      	ldr	r2, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0xbc>
 800258e:	4b72      	ldr	r3, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a71      	ldr	r2, [pc, #452]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 80025a8:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a67      	ldr	r2, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe f800 	bl	80005cc <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fd fffc 	bl	80005cc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e200      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe4>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fd ffec 	bl	80005cc <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fd ffe8 	bl	80005cc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1ec      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x10c>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
 800263e:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1c0      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4939      	ldr	r1, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e03a      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fd ffa1 	bl	80005cc <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7fd ff9d 	bl	80005cc <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1a1      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4927      	ldr	r1, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fd ff80 	bl	80005cc <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fd ff7c 	bl	80005cc <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e180      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d03a      	beq.n	8002770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7fd ff60 	bl	80005cc <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7fd ff5c 	bl	80005cc <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e160      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272e:	2001      	movs	r0, #1
 8002730:	f000 faa6 	bl	8002c80 <RCC_Delay>
 8002734:	e01c      	b.n	8002770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fd ff46 	bl	80005cc <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002742:	e00f      	b.n	8002764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7fd ff42 	bl	80005cc <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d908      	bls.n	8002764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e146      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	42420000 	.word	0x42420000
 8002760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e9      	bne.n	8002744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a6 	beq.w	80028ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a87      	ldr	r2, [pc, #540]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4b7f      	ldr	r3, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7e      	ldr	r2, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7fd ff03 	bl	80005cc <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7fd feff 	bl	80005cc <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e103      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x312>
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	e02d      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x334>
 8002806:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a66      	ldr	r2, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	e01c      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_OscConfig+0x356>
 8002828:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a60      	ldr	r2, [pc, #384]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	e00b      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a5a      	ldr	r2, [pc, #360]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a57      	ldr	r2, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d015      	beq.n	800288e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7fd feb3 	bl	80005cc <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fd feaf 	bl	80005cc <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0b1      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ee      	beq.n	800286a <HAL_RCC_OscConfig+0x37e>
 800288c:	e014      	b.n	80028b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7fd fe9d 	bl	80005cc <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fd fe99 	bl	80005cc <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e09b      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ee      	bne.n	8002896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4b3c      	ldr	r3, [pc, #240]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8087 	beq.w	80029e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d061      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d146      	bne.n	8002976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fd fe6d 	bl	80005cc <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fd fe69 	bl	80005cc <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e06d      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d108      	bne.n	8002930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4921      	ldr	r1, [pc, #132]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a19      	ldr	r1, [r3, #32]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	430b      	orrs	r3, r1
 8002942:	491b      	ldr	r1, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fd fe3d 	bl	80005cc <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7fd fe39 	bl	80005cc <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e03d      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x46a>
 8002974:	e035      	b.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fd fe26 	bl	80005cc <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fd fe22 	bl	80005cc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e026      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x498>
 80029a2:	e01e      	b.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e019      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_OscConfig+0x500>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0d0      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d910      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4965      	ldr	r1, [pc, #404]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d040      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d115      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e073      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06b      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4936      	ldr	r1, [pc, #216]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7fd fd74 	bl	80005cc <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fd fd70 	bl	80005cc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e053      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d210      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0207 	bic.w	r2, r3, #7
 8002b26:	4922      	ldr	r1, [pc, #136]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490a      	ldr	r1, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1cc>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fcd2 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	080090f0 	.word	0x080090f0
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	20000008 	.word	0x20000008

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b490      	push	{r4, r7}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bcc:	1d3c      	adds	r4, r7, #4
 8002bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bd4:	f240 2301 	movw	r3, #513	; 0x201
 8002bd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x46>
 8002c02:	e02b      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c06:	623b      	str	r3, [r7, #32]
      break;
 8002c08:	e02b      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	0c9b      	lsrs	r3, r3, #18
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3328      	adds	r3, #40	; 0x28
 8002c14:	443b      	add	r3, r7
 8002c16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c1a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d012      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	0c5b      	lsrs	r3, r3, #17
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	3328      	adds	r3, #40	; 0x28
 8002c32:	443b      	add	r3, r7
 8002c34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c3e:	fb03 f202 	mul.w	r2, r3, r2
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e004      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	623b      	str	r3, [r7, #32]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c5e:	623b      	str	r3, [r7, #32]
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc90      	pop	{r4, r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	08009090 	.word	0x08009090
 8002c74:	40021000 	.word	0x40021000
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	003d0900 	.word	0x003d0900

08002c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <RCC_Delay+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <RCC_Delay+0x38>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a5b      	lsrs	r3, r3, #9
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c9c:	bf00      	nop
  }
  while (Delay --);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <RCC_Delay+0x1c>
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	20000004 	.word	0x20000004
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d07d      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4a4b      	ldr	r2, [pc, #300]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	61d3      	str	r3, [r2, #28]
 8002cf4:	4b49      	ldr	r3, [pc, #292]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d118      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d10:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a42      	ldr	r2, [pc, #264]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1c:	f7fd fc56 	bl	80005cc <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	e008      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fd fc52 	bl	80005cc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e06d      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02e      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d027      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d60:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d76:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d014      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fd fc21 	bl	80005cc <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fd fc1d 	bl	80005cc <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e036      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4917      	ldr	r1, [pc, #92]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	490b      	ldr	r1, [pc, #44]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4904      	ldr	r1, [pc, #16]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42420440 	.word	0x42420440

08002e28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e28:	b084      	sub	sp, #16
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	f107 0014 	add.w	r0, r7, #20
 8002e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	b004      	add	sp, #16
 8002e46:	4770      	bx	lr

08002e48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	f107 0014 	add.w	r0, r7, #20
 8002ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	b004      	add	sp, #16
 8002efe:	4770      	bx	lr

08002f00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b09b      	sub	sp, #108	; 0x6c
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	78db      	ldrb	r3, [r3, #3]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d81f      	bhi.n	8002f72 <USB_ActivateEndpoint+0x72>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <USB_ActivateEndpoint+0x38>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f65 	.word	0x08002f65
 8002f40:	08002f7b 	.word	0x08002f7b
 8002f44:	08002f57 	.word	0x08002f57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002f48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002f54:	e012      	b.n	8002f7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002f56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f5a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002f5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002f62:	e00b      	b.n	8002f7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002f64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002f70:	e004      	b.n	8002f7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002f78:	e000      	b.n	8002f7c <USB_ActivateEndpoint+0x7c>
      break;
 8002f7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	7b1b      	ldrb	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 8149 	bne.w	8003280 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8084 	beq.w	8003100 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	4413      	add	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	011a      	lsls	r2, r3, #4
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	88db      	ldrh	r3, [r3, #6]
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	b29b      	uxth	r3, r3
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	81fb      	strh	r3, [r7, #14]
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <USB_ActivateEndpoint+0x17c>
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	81bb      	strh	r3, [r7, #12]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	441a      	add	r2, r3
 8003066:	89bb      	ldrh	r3, [r7, #12]
 8003068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003074:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003078:	b29b      	uxth	r3, r3
 800307a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	78db      	ldrb	r3, [r3, #3]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d020      	beq.n	80030c6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800309a:	813b      	strh	r3, [r7, #8]
 800309c:	893b      	ldrh	r3, [r7, #8]
 800309e:	f083 0320 	eor.w	r3, r3, #32
 80030a2:	813b      	strh	r3, [r7, #8]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	893b      	ldrh	r3, [r7, #8]
 80030b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	8013      	strh	r3, [r2, #0]
 80030c4:	e27f      	b.n	80035c6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	441a      	add	r2, r3
 80030e8:	897b      	ldrh	r3, [r7, #10]
 80030ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	8013      	strh	r3, [r2, #0]
 80030fe:	e262      	b.n	80035c6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	4413      	add	r3, r2
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	011a      	lsls	r2, r3, #4
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	4413      	add	r3, r2
 800311e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	88db      	ldrh	r3, [r3, #6]
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	4413      	add	r3, r2
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	011a      	lsls	r2, r3, #4
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	4413      	add	r3, r2
 8003152:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003156:	623b      	str	r3, [r7, #32]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d112      	bne.n	8003186 <USB_ActivateEndpoint+0x286>
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800316a:	b29a      	uxth	r2, r3
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317e:	b29a      	uxth	r2, r3
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e02f      	b.n	80031e6 <USB_ActivateEndpoint+0x2e6>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b3e      	cmp	r3, #62	; 0x3e
 800318c:	d813      	bhi.n	80031b6 <USB_ActivateEndpoint+0x2b6>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	663b      	str	r3, [r7, #96]	; 0x60
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <USB_ActivateEndpoint+0x2a8>
 80031a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a4:	3301      	adds	r3, #1
 80031a6:	663b      	str	r3, [r7, #96]	; 0x60
 80031a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	029b      	lsls	r3, r3, #10
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	e017      	b.n	80031e6 <USB_ActivateEndpoint+0x2e6>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	663b      	str	r3, [r7, #96]	; 0x60
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <USB_ActivateEndpoint+0x2d0>
 80031ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031cc:	3b01      	subs	r3, #1
 80031ce:	663b      	str	r3, [r7, #96]	; 0x60
 80031d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	83fb      	strh	r3, [r7, #30]
 80031f4:	8bfb      	ldrh	r3, [r7, #30]
 80031f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01b      	beq.n	8003236 <USB_ActivateEndpoint+0x336>
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	83bb      	strh	r3, [r7, #28]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	8bbb      	ldrh	r3, [r7, #28]
 8003222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	b29b      	uxth	r3, r3
 8003234:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324c:	837b      	strh	r3, [r7, #26]
 800324e:	8b7b      	ldrh	r3, [r7, #26]
 8003250:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003254:	837b      	strh	r3, [r7, #26]
 8003256:	8b7b      	ldrh	r3, [r7, #26]
 8003258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800325c:	837b      	strh	r3, [r7, #26]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	441a      	add	r2, r3
 8003268:	8b7b      	ldrh	r3, [r7, #26]
 800326a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800326e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327a:	b29b      	uxth	r3, r3
 800327c:	8013      	strh	r3, [r2, #0]
 800327e:	e1a2      	b.n	80035c6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	441a      	add	r2, r3
 80032a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80032a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80032b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65bb      	str	r3, [r7, #88]	; 0x58
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032cc:	4413      	add	r3, r2
 80032ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	011a      	lsls	r2, r3, #4
 80032d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032de:	657b      	str	r3, [r7, #84]	; 0x54
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	891b      	ldrh	r3, [r3, #8]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	653b      	str	r3, [r7, #80]	; 0x50
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003300:	4413      	add	r3, r2
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	011a      	lsls	r2, r3, #4
 800330a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330c:	4413      	add	r3, r2
 800330e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	895b      	ldrh	r3, [r3, #10]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003322:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 8091 	bne.w	8003450 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800333c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01b      	beq.n	800337e <USB_ActivateEndpoint+0x47e>
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	441a      	add	r2, r3
 8003368:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800336a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337a:	b29b      	uxth	r3, r3
 800337c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	873b      	strh	r3, [r7, #56]	; 0x38
 800338c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01b      	beq.n	80033ce <USB_ActivateEndpoint+0x4ce>
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	441a      	add	r2, r3
 80033b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80033e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80033e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80033ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80033ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80033f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342c:	867b      	strh	r3, [r7, #50]	; 0x32
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	441a      	add	r2, r3
 8003438:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800343a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800343e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344a:	b29b      	uxth	r3, r3
 800344c:	8013      	strh	r3, [r2, #0]
 800344e:	e0ba      	b.n	80035c6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01d      	beq.n	80034a8 <USB_ActivateEndpoint+0x5a8>
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80034b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01d      	beq.n	8003500 <USB_ActivateEndpoint+0x600>
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	441a      	add	r2, r3
 80034e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	78db      	ldrb	r3, [r3, #3]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d024      	beq.n	8003552 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003522:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003526:	f083 0320 	eor.w	r3, r3, #32
 800352a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	441a      	add	r2, r3
 8003538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800353c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354c:	b29b      	uxth	r3, r3
 800354e:	8013      	strh	r3, [r2, #0]
 8003550:	e01d      	b.n	800358e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003568:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800357a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800357e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358a:	b29b      	uxth	r3, r3
 800358c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	441a      	add	r2, r3
 80035b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80035b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80035c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	376c      	adds	r7, #108	; 0x6c
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b08d      	sub	sp, #52	; 0x34
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	7b1b      	ldrb	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 808e 	bne.w	8003704 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	785b      	ldrb	r3, [r3, #1]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d044      	beq.n	800367a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	81bb      	strh	r3, [r7, #12]
 80035fe:	89bb      	ldrh	r3, [r7, #12]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <USB_DeactivateEndpoint+0x6c>
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361e:	817b      	strh	r3, [r7, #10]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	897b      	ldrh	r3, [r7, #10]
 800362c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800363c:	b29b      	uxth	r3, r3
 800363e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003656:	813b      	strh	r3, [r7, #8]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	893b      	ldrh	r3, [r7, #8]
 8003664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800366c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003674:	b29b      	uxth	r3, r3
 8003676:	8013      	strh	r3, [r2, #0]
 8003678:	e192      	b.n	80039a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	827b      	strh	r3, [r7, #18]
 8003688:	8a7b      	ldrh	r3, [r7, #18]
 800368a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01b      	beq.n	80036ca <USB_DeactivateEndpoint+0xf6>
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	823b      	strh	r3, [r7, #16]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	8a3b      	ldrh	r3, [r7, #16]
 80036b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e0:	81fb      	strh	r3, [r7, #14]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	441a      	add	r2, r3
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fe:	b29b      	uxth	r3, r3
 8003700:	8013      	strh	r3, [r2, #0]
 8003702:	e14d      	b.n	80039a0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 80a5 	bne.w	8003858 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	843b      	strh	r3, [r7, #32]
 800371c:	8c3b      	ldrh	r3, [r7, #32]
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01b      	beq.n	800375e <USB_DeactivateEndpoint+0x18a>
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373c:	83fb      	strh	r3, [r7, #30]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	441a      	add	r2, r3
 8003748:	8bfb      	ldrh	r3, [r7, #30]
 800374a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800374e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	b29b      	uxth	r3, r3
 800375c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	83bb      	strh	r3, [r7, #28]
 800376c:	8bbb      	ldrh	r3, [r7, #28]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01b      	beq.n	80037ae <USB_DeactivateEndpoint+0x1da>
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378c:	837b      	strh	r3, [r7, #26]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	8b7b      	ldrh	r3, [r7, #26]
 800379a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c4:	833b      	strh	r3, [r7, #24]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	8b3b      	ldrh	r3, [r7, #24]
 80037d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	82fb      	strh	r3, [r7, #22]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	8afb      	ldrh	r3, [r7, #22]
 800380a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800380e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381a:	b29b      	uxth	r3, r3
 800381c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003834:	82bb      	strh	r3, [r7, #20]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	441a      	add	r2, r3
 8003840:	8abb      	ldrh	r3, [r7, #20]
 8003842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003852:	b29b      	uxth	r3, r3
 8003854:	8013      	strh	r3, [r2, #0]
 8003856:	e0a3      	b.n	80039a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003866:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <USB_DeactivateEndpoint+0x2d4>
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	441a      	add	r2, r3
 8003892:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80038b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01b      	beq.n	80038f8 <USB_DeactivateEndpoint+0x324>
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80038e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800391c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392c:	b29b      	uxth	r3, r3
 800392e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003946:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800398c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399c:	b29b      	uxth	r3, r3
 800399e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3734      	adds	r7, #52	; 0x34
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b0cc      	sub	sp, #304	; 0x130
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039ba:	6018      	str	r0, [r3, #0]
 80039bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039c4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	785b      	ldrb	r3, [r3, #1]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	f041 817d 	bne.w	8004cd2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80039d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d908      	bls.n	8003a06 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80039f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003a04:	e007      	b.n	8003a16 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	7b1b      	ldrb	r3, [r3, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d152      	bne.n	8003acc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6959      	ldr	r1, [r3, #20]
 8003a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	88da      	ldrh	r2, [r3, #6]
 8003a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003a48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003a4c:	6800      	ldr	r0, [r0, #0]
 8003a4e:	f001 ff23 	bl	8005898 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a5e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	4619      	mov	r1, r3
 8003a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a84:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	440a      	add	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	011a      	lsls	r2, r3, #4
 8003a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aa0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ab0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ac0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	801a      	strh	r2, [r3, #0]
 8003ac8:	f001 b8b5 	b.w	8004c36 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	78db      	ldrb	r3, [r3, #3]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	f040 84c6 	bne.w	800446a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	f240 8443 	bls.w	8004382 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	441a      	add	r2, r3
 8003b40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b68:	1ad2      	subs	r2, r2, r3
 8003b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 823e 	beq.w	800401a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ba2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ba6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003baa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 809a 	bne.w	8003cf8 <USB_EPStartXfer+0x34c>
 8003bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bcc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003bd0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003bf6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	011a      	lsls	r2, r3, #4
 8003c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d122      	bne.n	8003c76 <USB_EPStartXfer+0x2ca>
 8003c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	801a      	strh	r2, [r3, #0]
 8003c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	801a      	strh	r2, [r3, #0]
 8003c74:	e079      	b.n	8003d6a <USB_EPStartXfer+0x3be>
 8003c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c7c:	d81b      	bhi.n	8003cb6 <USB_EPStartXfer+0x30a>
 8003c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <USB_EPStartXfer+0x2f2>
 8003c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	029b      	lsls	r3, r3, #10
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	801a      	strh	r2, [r3, #0]
 8003cb4:	e059      	b.n	8003d6a <USB_EPStartXfer+0x3be>
 8003cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <USB_EPStartXfer+0x32a>
 8003ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	e038      	b.n	8003d6a <USB_EPStartXfer+0x3be>
 8003cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	785b      	ldrb	r3, [r3, #1]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d130      	bne.n	8003d6a <USB_EPStartXfer+0x3be>
 8003d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003d26:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	011a      	lsls	r2, r3, #4
 8003d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	895b      	ldrh	r3, [r3, #10]
 8003d76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6959      	ldr	r1, [r3, #20]
 8003d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003d94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003d98:	6800      	ldr	r0, [r0, #0]
 8003d9a:	f001 fd7d 	bl	8005898 <USB_WritePMA>
            ep->xfer_buff += len;
 8003d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dae:	441a      	add	r2, r3
 8003db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a1a      	ldr	r2, [r3, #32]
 8003dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d90f      	bls.n	8003df8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8003dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003de8:	1ad2      	subs	r2, r2, r3
 8003dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	621a      	str	r2, [r3, #32]
 8003df6:	e00e      	b.n	8003e16 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8003df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 809a 	bne.w	8003f5c <USB_EPStartXfer+0x5b0>
 8003e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003e34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003e5a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	440a      	add	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	011a      	lsls	r2, r3, #4
 8003e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d122      	bne.n	8003eda <USB_EPStartXfer+0x52e>
 8003e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	801a      	strh	r2, [r3, #0]
 8003eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	e083      	b.n	8003fe2 <USB_EPStartXfer+0x636>
 8003eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ede:	2b3e      	cmp	r3, #62	; 0x3e
 8003ee0:	d81b      	bhi.n	8003f1a <USB_EPStartXfer+0x56e>
 8003ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <USB_EPStartXfer+0x556>
 8003ef8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003efc:	3301      	adds	r3, #1
 8003efe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	801a      	strh	r2, [r3, #0]
 8003f18:	e063      	b.n	8003fe2 <USB_EPStartXfer+0x636>
 8003f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <USB_EPStartXfer+0x58e>
 8003f30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f34:	3b01      	subs	r3, #1
 8003f36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	e042      	b.n	8003fe2 <USB_EPStartXfer+0x636>
 8003f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d13a      	bne.n	8003fe2 <USB_EPStartXfer+0x636>
 8003f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003f78:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	4619      	mov	r1, r3
 8003f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003f9e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	011a      	lsls	r2, r3, #4
 8003fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	891b      	ldrh	r3, [r3, #8]
 8003fee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6959      	ldr	r1, [r3, #20]
 8003ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004002:	b29b      	uxth	r3, r3
 8004004:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004008:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800400c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004010:	6800      	ldr	r0, [r0, #0]
 8004012:	f001 fc41 	bl	8005898 <USB_WritePMA>
 8004016:	f000 be0e 	b.w	8004c36 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800401a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800401e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d16d      	bne.n	8004106 <USB_EPStartXfer+0x75a>
 800402a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800402e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
 8004036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800403a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004044:	b29b      	uxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404a:	4413      	add	r3, r2
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
 800404e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	011a      	lsls	r2, r3, #4
 800405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405e:	4413      	add	r3, r2
 8004060:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
 8004066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d112      	bne.n	8004094 <USB_EPStartXfer+0x6e8>
 800406e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004078:	b29a      	uxth	r2, r3
 800407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800408c:	b29a      	uxth	r2, r3
 800408e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	e063      	b.n	800415c <USB_EPStartXfer+0x7b0>
 8004094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004098:	2b3e      	cmp	r3, #62	; 0x3e
 800409a:	d817      	bhi.n	80040cc <USB_EPStartXfer+0x720>
 800409c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80040a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <USB_EPStartXfer+0x710>
 80040b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040b6:	3301      	adds	r3, #1
 80040b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80040bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	029b      	lsls	r3, r3, #10
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	e047      	b.n	800415c <USB_EPStartXfer+0x7b0>
 80040cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80040d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <USB_EPStartXfer+0x740>
 80040e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040e6:	3b01      	subs	r3, #1
 80040e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80040ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fe:	b29a      	uxth	r2, r3
 8004100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004102:	801a      	strh	r2, [r3, #0]
 8004104:	e02a      	b.n	800415c <USB_EPStartXfer+0x7b0>
 8004106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d122      	bne.n	800415c <USB_EPStartXfer+0x7b0>
 8004116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	653b      	str	r3, [r7, #80]	; 0x50
 8004122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004126:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004130:	b29b      	uxth	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004136:	4413      	add	r3, r2
 8004138:	653b      	str	r3, [r7, #80]	; 0x50
 800413a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	011a      	lsls	r2, r3, #4
 8004148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414a:	4413      	add	r3, r2
 800414c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004156:	b29a      	uxth	r2, r3
 8004158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800415c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	891b      	ldrh	r3, [r3, #8]
 8004168:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800416c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6959      	ldr	r1, [r3, #20]
 8004178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800417c:	b29b      	uxth	r3, r3
 800417e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004182:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004186:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800418a:	6800      	ldr	r0, [r0, #0]
 800418c:	f001 fb84 	bl	8005898 <USB_WritePMA>
            ep->xfer_buff += len;
 8004190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a0:	441a      	add	r2, r3
 80041a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80041ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d90f      	bls.n	80041ea <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80041ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a1a      	ldr	r2, [r3, #32]
 80041d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	621a      	str	r2, [r3, #32]
 80041e8:	e00e      	b.n	8004208 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80041ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80041fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	643b      	str	r3, [r7, #64]	; 0x40
 8004214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d16d      	bne.n	8004300 <USB_EPStartXfer+0x954>
 8004224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	4413      	add	r3, r2
 8004246:	63bb      	str	r3, [r7, #56]	; 0x38
 8004248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800424c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	011a      	lsls	r2, r3, #4
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	4413      	add	r3, r2
 800425a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
 8004260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d112      	bne.n	800428e <USB_EPStartXfer+0x8e2>
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004272:	b29a      	uxth	r2, r3
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	801a      	strh	r2, [r3, #0]
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004286:	b29a      	uxth	r2, r3
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	e05d      	b.n	800434a <USB_EPStartXfer+0x99e>
 800428e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004292:	2b3e      	cmp	r3, #62	; 0x3e
 8004294:	d817      	bhi.n	80042c6 <USB_EPStartXfer+0x91a>
 8004296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80042a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <USB_EPStartXfer+0x90a>
 80042ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042b0:	3301      	adds	r3, #1
 80042b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80042b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	029b      	lsls	r3, r3, #10
 80042be:	b29a      	uxth	r2, r3
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	e041      	b.n	800434a <USB_EPStartXfer+0x99e>
 80042c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80042d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <USB_EPStartXfer+0x93a>
 80042dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042e0:	3b01      	subs	r3, #1
 80042e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80042e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	e024      	b.n	800434a <USB_EPStartXfer+0x99e>
 8004300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d11c      	bne.n	800434a <USB_EPStartXfer+0x99e>
 8004310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431e:	b29b      	uxth	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004324:	4413      	add	r3, r2
 8004326:	643b      	str	r3, [r7, #64]	; 0x40
 8004328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800432c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	011a      	lsls	r2, r3, #4
 8004336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004338:	4413      	add	r3, r2
 800433a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004344:	b29a      	uxth	r2, r3
 8004346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004348:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800434a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800434e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	895b      	ldrh	r3, [r3, #10]
 8004356:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800435a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800435e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6959      	ldr	r1, [r3, #20]
 8004366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800436a:	b29b      	uxth	r3, r3
 800436c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004370:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004374:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004378:	6800      	ldr	r0, [r0, #0]
 800437a:	f001 fa8d 	bl	8005898 <USB_WritePMA>
 800437e:	f000 bc5a 	b.w	8004c36 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80043bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80043da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004408:	b29b      	uxth	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440e:	4413      	add	r3, r2
 8004410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	011a      	lsls	r2, r3, #4
 8004420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004422:	4413      	add	r3, r2
 8004424:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004428:	65bb      	str	r3, [r7, #88]	; 0x58
 800442a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800442e:	b29a      	uxth	r2, r3
 8004430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004432:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	891b      	ldrh	r3, [r3, #8]
 8004440:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6959      	ldr	r1, [r3, #20]
 8004450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004454:	b29b      	uxth	r3, r3
 8004456:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800445a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800445e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	f001 fa18 	bl	8005898 <USB_WritePMA>
 8004468:	e3e5      	b.n	8004c36 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800446a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80044b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80044c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6a1a      	ldr	r2, [r3, #32]
 80044d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d6:	1ad2      	subs	r2, r2, r3
 80044d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 81bc 	beq.w	8004884 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800450c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800451a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800451e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d16d      	bne.n	8004606 <USB_EPStartXfer+0xc5a>
 800452a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800452e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	67bb      	str	r3, [r7, #120]	; 0x78
 8004536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800453a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004544:	b29b      	uxth	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454a:	4413      	add	r3, r2
 800454c:	67bb      	str	r3, [r7, #120]	; 0x78
 800454e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	011a      	lsls	r2, r3, #4
 800455c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455e:	4413      	add	r3, r2
 8004560:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004564:	677b      	str	r3, [r7, #116]	; 0x74
 8004566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d112      	bne.n	8004594 <USB_EPStartXfer+0xbe8>
 800456e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004578:	b29a      	uxth	r2, r3
 800457a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458c:	b29a      	uxth	r2, r3
 800458e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	e060      	b.n	8004656 <USB_EPStartXfer+0xcaa>
 8004594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004598:	2b3e      	cmp	r3, #62	; 0x3e
 800459a:	d817      	bhi.n	80045cc <USB_EPStartXfer+0xc20>
 800459c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80045a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <USB_EPStartXfer+0xc10>
 80045b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045b6:	3301      	adds	r3, #1
 80045b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80045bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	029b      	lsls	r3, r3, #10
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	e044      	b.n	8004656 <USB_EPStartXfer+0xcaa>
 80045cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80045d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <USB_EPStartXfer+0xc40>
 80045e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045e6:	3b01      	subs	r3, #1
 80045e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80045ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	029b      	lsls	r3, r3, #10
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e027      	b.n	8004656 <USB_EPStartXfer+0xcaa>
 8004606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800460a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d11f      	bne.n	8004656 <USB_EPStartXfer+0xcaa>
 8004616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800461a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800462c:	4413      	add	r3, r2
 800462e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	011a      	lsls	r2, r3, #4
 8004640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004644:	4413      	add	r3, r2
 8004646:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800464a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800464c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004650:	b29a      	uxth	r2, r3
 8004652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004654:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	895b      	ldrh	r3, [r3, #10]
 8004662:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6959      	ldr	r1, [r3, #20]
 8004672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004676:	b29b      	uxth	r3, r3
 8004678:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800467c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004680:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004684:	6800      	ldr	r0, [r0, #0]
 8004686:	f001 f907 	bl	8005898 <USB_WritePMA>
          ep->xfer_buff += len;
 800468a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800468e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800469a:	441a      	add	r2, r3
 800469c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80046a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d90f      	bls.n	80046e4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80046c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a1a      	ldr	r2, [r3, #32]
 80046d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d4:	1ad2      	subs	r2, r2, r3
 80046d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	621a      	str	r2, [r3, #32]
 80046e2:	e00e      	b.n	8004702 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80046e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80046f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8295 	beq.w	8004c36 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800470c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d16d      	bne.n	80047f8 <USB_EPStartXfer+0xe4c>
 800471c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	66bb      	str	r3, [r7, #104]	; 0x68
 8004728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004736:	b29b      	uxth	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800473c:	4413      	add	r3, r2
 800473e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	011a      	lsls	r2, r3, #4
 800474e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004750:	4413      	add	r3, r2
 8004752:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004756:	667b      	str	r3, [r7, #100]	; 0x64
 8004758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d112      	bne.n	8004786 <USB_EPStartXfer+0xdda>
 8004760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800476a:	b29a      	uxth	r2, r3
 800476c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800476e:	801a      	strh	r2, [r3, #0]
 8004770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800477a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477e:	b29a      	uxth	r2, r3
 8004780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004782:	801a      	strh	r2, [r3, #0]
 8004784:	e063      	b.n	800484e <USB_EPStartXfer+0xea2>
 8004786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800478a:	2b3e      	cmp	r3, #62	; 0x3e
 800478c:	d817      	bhi.n	80047be <USB_EPStartXfer+0xe12>
 800478e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <USB_EPStartXfer+0xe02>
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a8:	3301      	adds	r3, #1
 80047aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	e047      	b.n	800484e <USB_EPStartXfer+0xea2>
 80047be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80047c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <USB_EPStartXfer+0xe32>
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d8:	3b01      	subs	r3, #1
 80047da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	029b      	lsls	r3, r3, #10
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e02a      	b.n	800484e <USB_EPStartXfer+0xea2>
 80047f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d122      	bne.n	800484e <USB_EPStartXfer+0xea2>
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	673b      	str	r3, [r7, #112]	; 0x70
 8004814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004822:	b29b      	uxth	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004828:	4413      	add	r3, r2
 800482a:	673b      	str	r3, [r7, #112]	; 0x70
 800482c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	011a      	lsls	r2, r3, #4
 800483a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800483c:	4413      	add	r3, r2
 800483e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004842:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004848:	b29a      	uxth	r2, r3
 800484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800484e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	891b      	ldrh	r3, [r3, #8]
 800485a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800485e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6959      	ldr	r1, [r3, #20]
 800486a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486e:	b29b      	uxth	r3, r3
 8004870:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004874:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004878:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f001 f80b 	bl	8005898 <USB_WritePMA>
 8004882:	e1d8      	b.n	8004c36 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d178      	bne.n	8004986 <USB_EPStartXfer+0xfda>
 8004894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048b8:	4413      	add	r3, r2
 80048ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	011a      	lsls	r2, r3, #4
 80048cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d116      	bne.n	8004910 <USB_EPStartXfer+0xf64>
 80048e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004906:	b29a      	uxth	r2, r3
 8004908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	e06b      	b.n	80049e8 <USB_EPStartXfer+0x103c>
 8004910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004914:	2b3e      	cmp	r3, #62	; 0x3e
 8004916:	d818      	bhi.n	800494a <USB_EPStartXfer+0xf9e>
 8004918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <USB_EPStartXfer+0xf8c>
 800492e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004932:	3301      	adds	r3, #1
 8004934:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004938:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800493c:	b29b      	uxth	r3, r3
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	b29a      	uxth	r2, r3
 8004942:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e04e      	b.n	80049e8 <USB_EPStartXfer+0x103c>
 800494a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2b00      	cmp	r3, #0
 800495e:	d104      	bne.n	800496a <USB_EPStartXfer+0xfbe>
 8004960:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004964:	3b01      	subs	r3, #1
 8004966:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800496a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800496e:	b29b      	uxth	r3, r3
 8004970:	029b      	lsls	r3, r3, #10
 8004972:	b29b      	uxth	r3, r3
 8004974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497c:	b29a      	uxth	r2, r3
 800497e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	e030      	b.n	80049e8 <USB_EPStartXfer+0x103c>
 8004986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d128      	bne.n	80049e8 <USB_EPStartXfer+0x103c>
 8004996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049ba:	4413      	add	r3, r2
 80049bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	011a      	lsls	r2, r3, #4
 80049ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049d2:	4413      	add	r3, r2
 80049d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80049e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	891b      	ldrh	r3, [r3, #8]
 80049f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6959      	ldr	r1, [r3, #20]
 8004a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a0e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a12:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a16:	6800      	ldr	r0, [r0, #0]
 8004a18:	f000 ff3e 	bl	8005898 <USB_WritePMA>
          ep->xfer_buff += len;
 8004a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a2c:	441a      	add	r2, r3
 8004a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90f      	bls.n	8004a76 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8004a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	621a      	str	r2, [r3, #32]
 8004a74:	e00e      	b.n	8004a94 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8004a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2200      	movs	r2, #0
 8004a92:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80cc 	beq.w	8004c36 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d178      	bne.n	8004bae <USB_EPStartXfer+0x1202>
 8004abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	011a      	lsls	r2, r3, #4
 8004af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004af8:	4413      	add	r3, r2
 8004afa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d116      	bne.n	8004b38 <USB_EPStartXfer+0x118c>
 8004b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	e064      	b.n	8004c02 <USB_EPStartXfer+0x1256>
 8004b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b3c:	2b3e      	cmp	r3, #62	; 0x3e
 8004b3e:	d818      	bhi.n	8004b72 <USB_EPStartXfer+0x11c6>
 8004b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <USB_EPStartXfer+0x11b4>
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	029b      	lsls	r3, r3, #10
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e047      	b.n	8004c02 <USB_EPStartXfer+0x1256>
 8004b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <USB_EPStartXfer+0x11e6>
 8004b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004baa:	801a      	strh	r2, [r3, #0]
 8004bac:	e029      	b.n	8004c02 <USB_EPStartXfer+0x1256>
 8004bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	785b      	ldrb	r3, [r3, #1]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d121      	bne.n	8004c02 <USB_EPStartXfer+0x1256>
 8004bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	011a      	lsls	r2, r3, #4
 8004be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bec:	4413      	add	r3, r2
 8004bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	895b      	ldrh	r3, [r3, #10]
 8004c0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6959      	ldr	r1, [r3, #20]
 8004c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c30:	6800      	ldr	r0, [r0, #0]
 8004c32:	f000 fe31 	bl	8005898 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c58:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c64:	8013      	strh	r3, [r2, #0]
 8004c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004c6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c72:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004c76:	8812      	ldrh	r2, [r2, #0]
 8004c78:	f082 0210 	eor.w	r2, r2, #16
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c82:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004c86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c8a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004c8e:	8812      	ldrh	r2, [r2, #0]
 8004c90:	f082 0220 	eor.w	r2, r2, #32
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8013      	strh	r3, [r2, #0]
 8004cce:	f000 bc9f 	b.w	8005610 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	7b1b      	ldrb	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 80ae 	bne.w	8004e40 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d917      	bls.n	8004d30 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8004d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d20:	1ad2      	subs	r2, r2, r3
 8004d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	619a      	str	r2, [r3, #24]
 8004d2e:	e00e      	b.n	8004d4e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8004d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d72:	4413      	add	r3, r2
 8004d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	011a      	lsls	r2, r3, #4
 8004d86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d116      	bne.n	8004dca <USB_EPStartXfer+0x141e>
 8004d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	e3e8      	b.n	800559c <USB_EPStartXfer+0x1bf0>
 8004dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dce:	2b3e      	cmp	r3, #62	; 0x3e
 8004dd0:	d818      	bhi.n	8004e04 <USB_EPStartXfer+0x1458>
 8004dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <USB_EPStartXfer+0x1446>
 8004de8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dec:	3301      	adds	r3, #1
 8004dee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004df2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	e3cb      	b.n	800559c <USB_EPStartXfer+0x1bf0>
 8004e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <USB_EPStartXfer+0x1478>
 8004e1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004e24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	029b      	lsls	r3, r3, #10
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	e3ad      	b.n	800559c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	f040 8200 	bne.w	8005252 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 8091 	bne.w	8004f86 <USB_EPStartXfer+0x15da>
 8004e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e88:	4413      	add	r3, r2
 8004e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	011a      	lsls	r2, r3, #4
 8004e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <USB_EPStartXfer+0x153c>
 8004eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	e083      	b.n	8004ff0 <USB_EPStartXfer+0x1644>
 8004ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef6:	d820      	bhi.n	8004f3a <USB_EPStartXfer+0x158e>
 8004ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d004      	beq.n	8004f28 <USB_EPStartXfer+0x157c>
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f22:	3301      	adds	r3, #1
 8004f24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e05a      	b.n	8004ff0 <USB_EPStartXfer+0x1644>
 8004f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <USB_EPStartXfer+0x15be>
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f64:	3b01      	subs	r3, #1
 8004f66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	029b      	lsls	r3, r3, #10
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	e034      	b.n	8004ff0 <USB_EPStartXfer+0x1644>
 8004f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d12c      	bne.n	8004ff0 <USB_EPStartXfer+0x1644>
 8004f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fba:	4413      	add	r3, r2
 8004fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	011a      	lsls	r2, r3, #4
 8004fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f040 8091 	bne.w	8005132 <USB_EPStartXfer+0x1786>
 8005010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800501e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502c:	b29b      	uxth	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005034:	4413      	add	r3, r2
 8005036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	011a      	lsls	r2, r3, #4
 8005048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800504c:	4413      	add	r3, r2
 800504e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <USB_EPStartXfer+0x16e8>
 8005066:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005072:	b29a      	uxth	r2, r3
 8005074:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005078:	801a      	strh	r2, [r3, #0]
 800507a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508a:	b29a      	uxth	r2, r3
 800508c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e07c      	b.n	800518e <USB_EPStartXfer+0x17e2>
 8005094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b3e      	cmp	r3, #62	; 0x3e
 80050a2:	d820      	bhi.n	80050e6 <USB_EPStartXfer+0x173a>
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <USB_EPStartXfer+0x1728>
 80050ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050ce:	3301      	adds	r3, #1
 80050d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050d8:	b29b      	uxth	r3, r3
 80050da:	029b      	lsls	r3, r3, #10
 80050dc:	b29a      	uxth	r2, r3
 80050de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050e2:	801a      	strh	r2, [r3, #0]
 80050e4:	e053      	b.n	800518e <USB_EPStartXfer+0x17e2>
 80050e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <USB_EPStartXfer+0x176a>
 800510c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005110:	3b01      	subs	r3, #1
 8005112:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005116:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800511a:	b29b      	uxth	r3, r3
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	b29b      	uxth	r3, r3
 8005120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005128:	b29a      	uxth	r2, r3
 800512a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800512e:	801a      	strh	r2, [r3, #0]
 8005130:	e02d      	b.n	800518e <USB_EPStartXfer+0x17e2>
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	785b      	ldrb	r3, [r3, #1]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d125      	bne.n	800518e <USB_EPStartXfer+0x17e2>
 8005142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005150:	b29b      	uxth	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005158:	4413      	add	r3, r2
 800515a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800515e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	011a      	lsls	r2, r3, #4
 800516c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005170:	4413      	add	r3, r2
 8005172:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005176:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	b29a      	uxth	r2, r3
 8005188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800518c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800518e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 81fe 	beq.w	800559c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80051a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80051c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80051c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <USB_EPStartXfer+0x182c>
 80051cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10d      	bne.n	80051f4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80051d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80051dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 81db 	bne.w	800559c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80051e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 81d4 	bne.w	800559c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80051f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	441a      	add	r2, r3
 8005238:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800523c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800524c:	b29b      	uxth	r3, r3
 800524e:	8013      	strh	r3, [r2, #0]
 8005250:	e1a4      	b.n	800559c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	78db      	ldrb	r3, [r3, #3]
 800525e:	2b01      	cmp	r3, #1
 8005260:	f040 819a 	bne.w	8005598 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	429a      	cmp	r2, r3
 800527e:	d917      	bls.n	80052b0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a0:	1ad2      	subs	r2, r2, r3
 80052a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	619a      	str	r2, [r3, #24]
 80052ae:	e00e      	b.n	80052ce <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80052b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80052c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2200      	movs	r2, #0
 80052cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d178      	bne.n	80053d0 <USB_EPStartXfer+0x1a24>
 80052de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80052ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005302:	4413      	add	r3, r2
 8005304:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	011a      	lsls	r2, r3, #4
 8005316:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800531a:	4413      	add	r3, r2
 800531c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005320:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <USB_EPStartXfer+0x19ae>
 800532c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005338:	b29a      	uxth	r2, r3
 800533a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005350:	b29a      	uxth	r2, r3
 8005352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e06b      	b.n	8005432 <USB_EPStartXfer+0x1a86>
 800535a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535e:	2b3e      	cmp	r3, #62	; 0x3e
 8005360:	d818      	bhi.n	8005394 <USB_EPStartXfer+0x19e8>
 8005362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800536c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <USB_EPStartXfer+0x19d6>
 8005378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537c:	3301      	adds	r3, #1
 800537e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005386:	b29b      	uxth	r3, r3
 8005388:	029b      	lsls	r3, r3, #10
 800538a:	b29a      	uxth	r2, r3
 800538c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	e04e      	b.n	8005432 <USB_EPStartXfer+0x1a86>
 8005394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800539e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <USB_EPStartXfer+0x1a08>
 80053aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ae:	3b01      	subs	r3, #1
 80053b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	b29b      	uxth	r3, r3
 80053be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	e030      	b.n	8005432 <USB_EPStartXfer+0x1a86>
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d128      	bne.n	8005432 <USB_EPStartXfer+0x1a86>
 80053e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	4413      	add	r3, r2
 8005406:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800540a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	011a      	lsls	r2, r3, #4
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	4413      	add	r3, r2
 800541e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005422:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542a:	b29a      	uxth	r2, r3
 800542c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005430:	801a      	strh	r2, [r3, #0]
 8005432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d178      	bne.n	8005542 <USB_EPStartXfer+0x1b96>
 8005450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800545e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546c:	b29b      	uxth	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005474:	4413      	add	r3, r2
 8005476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800547a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	011a      	lsls	r2, r3, #4
 8005488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800548c:	4413      	add	r3, r2
 800548e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d116      	bne.n	80054cc <USB_EPStartXfer+0x1b20>
 800549e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	e067      	b.n	800559c <USB_EPStartXfer+0x1bf0>
 80054cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d0:	2b3e      	cmp	r3, #62	; 0x3e
 80054d2:	d818      	bhi.n	8005506 <USB_EPStartXfer+0x1b5a>
 80054d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <USB_EPStartXfer+0x1b48>
 80054ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054ee:	3301      	adds	r3, #1
 80054f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	029b      	lsls	r3, r3, #10
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e04a      	b.n	800559c <USB_EPStartXfer+0x1bf0>
 8005506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <USB_EPStartXfer+0x1b7a>
 800551c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005520:	3b01      	subs	r3, #1
 8005522:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800552a:	b29b      	uxth	r3, r3
 800552c:	029b      	lsls	r3, r3, #10
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005538:	b29a      	uxth	r2, r3
 800553a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	e02c      	b.n	800559c <USB_EPStartXfer+0x1bf0>
 8005542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d124      	bne.n	800559c <USB_EPStartXfer+0x1bf0>
 8005552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005560:	b29b      	uxth	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005568:	4413      	add	r3, r2
 800556a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	011a      	lsls	r2, r3, #4
 800557c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005580:	4413      	add	r3, r2
 8005582:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005586:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800558a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558e:	b29a      	uxth	r2, r3
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	e001      	b.n	800559c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e03a      	b.n	8005612 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800559c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80055c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80055ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80055d2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80055d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	441a      	add	r2, r3
 80055f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80055fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	b29b      	uxth	r3, r3
 800560e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d020      	beq.n	8005670 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005644:	81bb      	strh	r3, [r7, #12]
 8005646:	89bb      	ldrh	r3, [r7, #12]
 8005648:	f083 0310 	eor.w	r3, r3, #16
 800564c:	81bb      	strh	r3, [r7, #12]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	441a      	add	r2, r3
 8005658:	89bb      	ldrh	r3, [r7, #12]
 800565a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566a:	b29b      	uxth	r3, r3
 800566c:	8013      	strh	r3, [r2, #0]
 800566e:	e01f      	b.n	80056b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	81fb      	strh	r3, [r7, #14]
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800568e:	81fb      	strh	r3, [r7, #14]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	441a      	add	r2, r3
 800569a:	89fb      	ldrh	r3, [r7, #14]
 800569c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	7b1b      	ldrb	r3, [r3, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f040 809d 	bne.w	800580a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d04c      	beq.n	8005772 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	823b      	strh	r3, [r7, #16]
 80056e6:	8a3b      	ldrh	r3, [r7, #16]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01b      	beq.n	8005728 <USB_EPClearStall+0x6c>
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	81fb      	strh	r3, [r7, #14]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	89fb      	ldrh	r3, [r7, #14]
 8005714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005720:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005724:	b29b      	uxth	r3, r3
 8005726:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d06c      	beq.n	800580a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005746:	81bb      	strh	r3, [r7, #12]
 8005748:	89bb      	ldrh	r3, [r7, #12]
 800574a:	f083 0320 	eor.w	r3, r3, #32
 800574e:	81bb      	strh	r3, [r7, #12]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	89bb      	ldrh	r3, [r7, #12]
 800575c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]
 8005770:	e04b      	b.n	800580a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	82fb      	strh	r3, [r7, #22]
 8005780:	8afb      	ldrh	r3, [r7, #22]
 8005782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01b      	beq.n	80057c2 <USB_EPClearStall+0x106>
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	82bb      	strh	r3, [r7, #20]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	8abb      	ldrh	r3, [r7, #20]
 80057ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d8:	827b      	strh	r3, [r7, #18]
 80057da:	8a7b      	ldrh	r3, [r7, #18]
 80057dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057e0:	827b      	strh	r3, [r7, #18]
 80057e2:	8a7b      	ldrh	r3, [r7, #18]
 80057e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057e8:	827b      	strh	r3, [r7, #18]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	8a7b      	ldrh	r3, [r7, #18]
 80057f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005806:	b29b      	uxth	r3, r3
 8005808:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr

0800583c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005872:	b29b      	uxth	r3, r3
 8005874:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr

08005882 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005898:	b480      	push	{r7}
 800589a:	b08d      	sub	sp, #52	; 0x34
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4611      	mov	r1, r2
 80058a4:	461a      	mov	r2, r3
 80058a6:	460b      	mov	r3, r1
 80058a8:	80fb      	strh	r3, [r7, #6]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058ae:	88bb      	ldrh	r3, [r7, #4]
 80058b0:	3301      	adds	r3, #1
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	005a      	lsls	r2, r3, #1
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d0:	e01e      	b.n	8005910 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	3301      	adds	r3, #1
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	3302      	adds	r3, #2
 80058fc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	3302      	adds	r3, #2
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	3301      	adds	r3, #1
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	3b01      	subs	r3, #1
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1dd      	bne.n	80058d2 <USB_WritePMA+0x3a>
  }
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	3734      	adds	r7, #52	; 0x34
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005922:	b480      	push	{r7}
 8005924:	b08b      	sub	sp, #44	; 0x2c
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	4611      	mov	r1, r2
 800592e:	461a      	mov	r2, r3
 8005930:	460b      	mov	r3, r1
 8005932:	80fb      	strh	r3, [r7, #6]
 8005934:	4613      	mov	r3, r2
 8005936:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005938:	88bb      	ldrh	r3, [r7, #4]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	b29b      	uxth	r3, r3
 800593e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	005a      	lsls	r2, r3, #1
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005954:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	e01b      	b.n	8005994 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	3302      	adds	r3, #2
 8005968:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3301      	adds	r3, #1
 8005976:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	b2da      	uxtb	r2, r3
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	3302      	adds	r3, #2
 800598c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	3b01      	subs	r3, #1
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e0      	bne.n	800595c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800599a:	88bb      	ldrh	r3, [r7, #4]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	701a      	strb	r2, [r3, #0]
  }
}
 80059b6:	bf00      	nop
 80059b8:	372c      	adds	r7, #44	; 0x2c
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	7c1b      	ldrb	r3, [r3, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d115      	bne.n	8005a04 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059dc:	2202      	movs	r2, #2
 80059de:	2181      	movs	r1, #129	; 0x81
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f003 f8a6 	bl	8008b32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059f0:	2202      	movs	r2, #2
 80059f2:	2101      	movs	r1, #1
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f003 f89c 	bl	8008b32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005a02:	e012      	b.n	8005a2a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a04:	2340      	movs	r3, #64	; 0x40
 8005a06:	2202      	movs	r2, #2
 8005a08:	2181      	movs	r1, #129	; 0x81
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f003 f891 	bl	8008b32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a16:	2340      	movs	r3, #64	; 0x40
 8005a18:	2202      	movs	r2, #2
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f003 f888 	bl	8008b32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	2182      	movs	r1, #130	; 0x82
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f003 f87e 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a40:	f003 f99e 	bl	8008d80 <USBD_static_malloc>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
 8005a5a:	e026      	b.n	8005aaa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a62:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7c1b      	ldrb	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a90:	2101      	movs	r1, #1
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f003 f93e 	bl	8008d14 <USBD_LL_PrepareReceive>
 8005a98:	e007      	b.n	8005aaa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aa0:	2340      	movs	r3, #64	; 0x40
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f003 f935 	bl	8008d14 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ac4:	2181      	movs	r1, #129	; 0x81
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f003 f859 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f003 f852 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ae2:	2182      	movs	r1, #130	; 0x82
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f003 f84a 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00e      	beq.n	8005b18 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f003 f944 	bl	8008d98 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b32:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d039      	beq.n	8005bc0 <USBD_CDC_Setup+0x9e>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d17f      	bne.n	8005c50 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	88db      	ldrh	r3, [r3, #6]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d029      	beq.n	8005bac <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b25b      	sxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da11      	bge.n	8005b86 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005b6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	88d2      	ldrh	r2, [r2, #6]
 8005b74:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b76:	6939      	ldr	r1, [r7, #16]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	88db      	ldrh	r3, [r3, #6]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 fa09 	bl	8006f96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b84:	e06b      	b.n	8005c5e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	785a      	ldrb	r2, [r3, #1]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	88db      	ldrh	r3, [r3, #6]
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b9c:	6939      	ldr	r1, [r7, #16]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	88db      	ldrh	r3, [r3, #6]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 fa24 	bl	8006ff2 <USBD_CtlPrepareRx>
      break;
 8005baa:	e058      	b.n	8005c5e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	7850      	ldrb	r0, [r2, #1]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	4798      	blx	r3
      break;
 8005bbe:	e04e      	b.n	8005c5e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b0b      	cmp	r3, #11
 8005bc6:	d02e      	beq.n	8005c26 <USBD_CDC_Setup+0x104>
 8005bc8:	2b0b      	cmp	r3, #11
 8005bca:	dc38      	bgt.n	8005c3e <USBD_CDC_Setup+0x11c>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <USBD_CDC_Setup+0xb4>
 8005bd0:	2b0a      	cmp	r3, #10
 8005bd2:	d014      	beq.n	8005bfe <USBD_CDC_Setup+0xdc>
 8005bd4:	e033      	b.n	8005c3e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d107      	bne.n	8005bf0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005be0:	f107 030c 	add.w	r3, r7, #12
 8005be4:	2202      	movs	r2, #2
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 f9d4 	bl	8006f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bee:	e02e      	b.n	8005c4e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 f965 	bl	8006ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	75fb      	strb	r3, [r7, #23]
          break;
 8005bfc:	e027      	b.n	8005c4e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d107      	bne.n	8005c18 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c08:	f107 030f 	add.w	r3, r7, #15
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 f9c0 	bl	8006f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c16:	e01a      	b.n	8005c4e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 f951 	bl	8006ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c20:	2302      	movs	r3, #2
 8005c22:	75fb      	strb	r3, [r7, #23]
          break;
 8005c24:	e013      	b.n	8005c4e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d00d      	beq.n	8005c4c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 f945 	bl	8006ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c3c:	e006      	b.n	8005c4c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f93e 	bl	8006ec2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c46:	2302      	movs	r3, #2
 8005c48:	75fb      	strb	r3, [r7, #23]
          break;
 8005c4a:	e000      	b.n	8005c4e <USBD_CDC_Setup+0x12c>
          break;
 8005c4c:	bf00      	nop
      }
      break;
 8005c4e:	e006      	b.n	8005c5e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 f935 	bl	8006ec2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5c:	bf00      	nop
  }

  return ret;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c82:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d03a      	beq.n	8005d04 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c8e:	78fa      	ldrb	r2, [r7, #3]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	331c      	adds	r3, #28
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d029      	beq.n	8005cf8 <USBD_CDC_DataIn+0x90>
 8005ca4:	78fa      	ldrb	r2, [r7, #3]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	331c      	adds	r3, #28
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	78f9      	ldrb	r1, [r7, #3]
 8005cb8:	68b8      	ldr	r0, [r7, #8]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4403      	add	r3, r0
 8005cc4:	3338      	adds	r3, #56	; 0x38
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d110      	bne.n	8005cf8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	331c      	adds	r3, #28
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cea:	78f9      	ldrb	r1, [r7, #3]
 8005cec:	2300      	movs	r3, #0
 8005cee:	2200      	movs	r2, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f002 ffec 	bl	8008cce <USBD_LL_Transmit>
 8005cf6:	e003      	b.n	8005d00 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f003 f817 	bl	8008d5a <USBD_LL_GetRxDataSize>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d52:	4611      	mov	r1, r2
 8005d54:	4798      	blx	r3

    return USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e000      	b.n	8005d5c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d5a:	2302      	movs	r3, #2
  }
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d72:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d015      	beq.n	8005daa <USBD_CDC_EP0_RxReady+0x46>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d84:	2bff      	cmp	r3, #255	; 0xff
 8005d86:	d010      	beq.n	8005daa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d96:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	22ff      	movs	r2, #255	; 0xff
 8005da6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2243      	movs	r2, #67	; 0x43
 8005dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005dc2:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000098 	.word	0x20000098

08005dd4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2243      	movs	r2, #67	; 0x43
 8005de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005de2:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000054 	.word	0x20000054

08005df4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2243      	movs	r2, #67	; 0x43
 8005e00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e02:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	200000dc 	.word	0x200000dc

08005e14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	220a      	movs	r2, #10
 8005e20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e22:	4b03      	ldr	r3, [pc, #12]	; (8005e30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000010 	.word	0x20000010

08005e34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01c      	beq.n	8005f0c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d115      	bne.n	8005f08 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2181      	movs	r1, #129	; 0x81
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f002 fee5 	bl	8008cce <USBD_LL_Transmit>

      return USBD_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e002      	b.n	8005f0e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005f0c:	2302      	movs	r3, #2
  }
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d017      	beq.n	8005f60 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7c1b      	ldrb	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f42:	2101      	movs	r1, #1
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 fee5 	bl	8008d14 <USBD_LL_PrepareReceive>
 8005f4a:	e007      	b.n	8005f5c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f52:	2340      	movs	r3, #64	; 0x40
 8005f54:	2101      	movs	r1, #1
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f002 fedc 	bl	8008d14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	4613      	mov	r3, r2
 8005f76:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e01a      	b.n	8005fb8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	79fa      	ldrb	r2, [r7, #7]
 8005fae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f002 fd49 	bl	8008a48 <USBD_LL_Init>

  return USBD_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d006      	beq.n	8005fe2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	e001      	b.n	8005fe6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 fd7e 	bl	8008afc <USBD_LL_Start>

  return USBD_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800602a:	2302      	movs	r3, #2
 800602c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00c      	beq.n	8006052 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	4611      	mov	r1, r2
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	4611      	mov	r1, r2
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3

  return USBD_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fed8 	bl	8006e4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d016      	beq.n	80060ec <USBD_LL_SetupStage+0x6a>
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d81c      	bhi.n	80060fc <USBD_LL_SetupStage+0x7a>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <USBD_LL_SetupStage+0x4a>
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d008      	beq.n	80060dc <USBD_LL_SetupStage+0x5a>
 80060ca:	e017      	b.n	80060fc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f9cb 	bl	8006470 <USBD_StdDevReq>
      break;
 80060da:	e01a      	b.n	8006112 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa2d 	bl	8006544 <USBD_StdItfReq>
      break;
 80060ea:	e012      	b.n	8006112 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fa6d 	bl	80065d4 <USBD_StdEPReq>
      break;
 80060fa:	e00a      	b.n	8006112 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006102:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006106:	b2db      	uxtb	r3, r3
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f002 fd56 	bl	8008bbc <USBD_LL_StallEP>
      break;
 8006110:	bf00      	nop
  }

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	460b      	mov	r3, r1
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800612a:	7afb      	ldrb	r3, [r7, #11]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d14b      	bne.n	80061c8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006136:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800613e:	2b03      	cmp	r3, #3
 8006140:	d134      	bne.n	80061ac <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	429a      	cmp	r2, r3
 800614c:	d919      	bls.n	8006182 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006164:	429a      	cmp	r2, r3
 8006166:	d203      	bcs.n	8006170 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800616c:	b29b      	uxth	r3, r3
 800616e:	e002      	b.n	8006176 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006174:	b29b      	uxth	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 ff57 	bl	800702e <USBD_CtlContinueRx>
 8006180:	e038      	b.n	80061f4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006194:	2b03      	cmp	r3, #3
 8006196:	d105      	bne.n	80061a4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 ff54 	bl	8007052 <USBD_CtlSendStatus>
 80061aa:	e023      	b.n	80061f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d11e      	bne.n	80061f4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061be:	2100      	movs	r1, #0
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f002 fcfb 	bl	8008bbc <USBD_LL_StallEP>
 80061c6:	e015      	b.n	80061f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00d      	beq.n	80061f0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d108      	bne.n	80061f0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	7afa      	ldrb	r2, [r7, #11]
 80061e8:	4611      	mov	r1, r2
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	4798      	blx	r3
 80061ee:	e001      	b.n	80061f4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061f0:	2302      	movs	r3, #2
 80061f2:	e000      	b.n	80061f6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	460b      	mov	r3, r1
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d17f      	bne.n	8006312 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3314      	adds	r3, #20
 8006216:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800621e:	2b02      	cmp	r3, #2
 8006220:	d15c      	bne.n	80062dc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	429a      	cmp	r2, r3
 800622c:	d915      	bls.n	800625a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	b29b      	uxth	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fec1 	bl	8006fce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800624c:	2300      	movs	r3, #0
 800624e:	2200      	movs	r2, #0
 8006250:	2100      	movs	r1, #0
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f002 fd5e 	bl	8008d14 <USBD_LL_PrepareReceive>
 8006258:	e04e      	b.n	80062f8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	6912      	ldr	r2, [r2, #16]
 8006262:	fbb3 f1f2 	udiv	r1, r3, r2
 8006266:	fb01 f202 	mul.w	r2, r1, r2
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11c      	bne.n	80062aa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006278:	429a      	cmp	r2, r3
 800627a:	d316      	bcc.n	80062aa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006286:	429a      	cmp	r2, r3
 8006288:	d20f      	bcs.n	80062aa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800628a:	2200      	movs	r2, #0
 800628c:	2100      	movs	r1, #0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fe9d 	bl	8006fce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800629c:	2300      	movs	r3, #0
 800629e:	2200      	movs	r2, #0
 80062a0:	2100      	movs	r1, #0
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f002 fd36 	bl	8008d14 <USBD_LL_PrepareReceive>
 80062a8:	e026      	b.n	80062f8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d105      	bne.n	80062cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80062cc:	2180      	movs	r1, #128	; 0x80
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f002 fc74 	bl	8008bbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fecf 	bl	8007078 <USBD_CtlReceiveStatus>
 80062da:	e00d      	b.n	80062f8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d004      	beq.n	80062f0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80062f0:	2180      	movs	r1, #128	; 0x80
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f002 fc62 	bl	8008bbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d11d      	bne.n	800633e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff fe81 	bl	800600a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006310:	e015      	b.n	800633e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006324:	2b03      	cmp	r3, #3
 8006326:	d108      	bne.n	800633a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	7afa      	ldrb	r2, [r7, #11]
 8006332:	4611      	mov	r1, r2
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	4798      	blx	r3
 8006338:	e001      	b.n	800633e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800633a:	2302      	movs	r3, #2
 800633c:	e000      	b.n	8006340 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	2200      	movs	r2, #0
 8006354:	2100      	movs	r1, #0
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f002 fbeb 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2240      	movs	r2, #64	; 0x40
 8006368:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	2200      	movs	r2, #0
 8006370:	2180      	movs	r1, #128	; 0x80
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f002 fbdd 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2240      	movs	r2, #64	; 0x40
 8006382:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d009      	beq.n	80063c0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6852      	ldr	r2, [r2, #4]
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	4611      	mov	r1, r2
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
  }

  return USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	78fa      	ldrb	r2, [r7, #3]
 80063da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2204      	movs	r2, #4
 8006400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641e:	2b04      	cmp	r3, #4
 8006420:	d105      	bne.n	800642e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006448:	2b03      	cmp	r3, #3
 800644a:	d10b      	bne.n	8006464 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d005      	beq.n	8006496 <USBD_StdDevReq+0x26>
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d84f      	bhi.n	800652e <USBD_StdDevReq+0xbe>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <USBD_StdDevReq+0x36>
 8006492:	2b20      	cmp	r3, #32
 8006494:	d14b      	bne.n	800652e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
      break;
 80064a4:	e048      	b.n	8006538 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	2b09      	cmp	r3, #9
 80064ac:	d839      	bhi.n	8006522 <USBD_StdDevReq+0xb2>
 80064ae:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <USBD_StdDevReq+0x44>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	08006505 	.word	0x08006505
 80064b8:	08006519 	.word	0x08006519
 80064bc:	08006523 	.word	0x08006523
 80064c0:	0800650f 	.word	0x0800650f
 80064c4:	08006523 	.word	0x08006523
 80064c8:	080064e7 	.word	0x080064e7
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	08006523 	.word	0x08006523
 80064d4:	080064fb 	.word	0x080064fb
 80064d8:	080064f1 	.word	0x080064f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9dc 	bl	800689c <USBD_GetDescriptor>
          break;
 80064e4:	e022      	b.n	800652c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb3f 	bl	8006b6c <USBD_SetAddress>
          break;
 80064ee:	e01d      	b.n	800652c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fb7e 	bl	8006bf4 <USBD_SetConfig>
          break;
 80064f8:	e018      	b.n	800652c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fc07 	bl	8006d10 <USBD_GetConfig>
          break;
 8006502:	e013      	b.n	800652c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fc37 	bl	8006d7a <USBD_GetStatus>
          break;
 800650c:	e00e      	b.n	800652c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fc65 	bl	8006de0 <USBD_SetFeature>
          break;
 8006516:	e009      	b.n	800652c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fc74 	bl	8006e08 <USBD_ClrFeature>
          break;
 8006520:	e004      	b.n	800652c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fccc 	bl	8006ec2 <USBD_CtlError>
          break;
 800652a:	bf00      	nop
      }
      break;
 800652c:	e004      	b.n	8006538 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fcc6 	bl	8006ec2 <USBD_CtlError>
      break;
 8006536:	bf00      	nop
  }

  return ret;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop

08006544 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d005      	beq.n	800656a <USBD_StdItfReq+0x26>
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d82e      	bhi.n	80065c0 <USBD_StdItfReq+0x7c>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <USBD_StdItfReq+0x26>
 8006566:	2b20      	cmp	r3, #32
 8006568:	d12a      	bne.n	80065c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006570:	3b01      	subs	r3, #1
 8006572:	2b02      	cmp	r3, #2
 8006574:	d81d      	bhi.n	80065b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	889b      	ldrh	r3, [r3, #4]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d813      	bhi.n	80065a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88db      	ldrh	r3, [r3, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d110      	bne.n	80065bc <USBD_StdItfReq+0x78>
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10d      	bne.n	80065bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fd56 	bl	8007052 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065a6:	e009      	b.n	80065bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fc89 	bl	8006ec2 <USBD_CtlError>
          break;
 80065b0:	e004      	b.n	80065bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fc84 	bl	8006ec2 <USBD_CtlError>
          break;
 80065ba:	e000      	b.n	80065be <USBD_StdItfReq+0x7a>
          break;
 80065bc:	bf00      	nop
      }
      break;
 80065be:	e004      	b.n	80065ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fc7d 	bl	8006ec2 <USBD_CtlError>
      break;
 80065c8:	bf00      	nop
  }

  return USBD_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	889b      	ldrh	r3, [r3, #4]
 80065e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	d007      	beq.n	8006604 <USBD_StdEPReq+0x30>
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	f200 8146 	bhi.w	8006886 <USBD_StdEPReq+0x2b2>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <USBD_StdEPReq+0x40>
 80065fe:	2b20      	cmp	r3, #32
 8006600:	f040 8141 	bne.w	8006886 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
      break;
 8006612:	e13d      	b.n	8006890 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800661c:	2b20      	cmp	r3, #32
 800661e:	d10a      	bne.n	8006636 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	e12d      	b.n	8006892 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b03      	cmp	r3, #3
 800663c:	d007      	beq.n	800664e <USBD_StdEPReq+0x7a>
 800663e:	2b03      	cmp	r3, #3
 8006640:	f300 811b 	bgt.w	800687a <USBD_StdEPReq+0x2a6>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d072      	beq.n	800672e <USBD_StdEPReq+0x15a>
 8006648:	2b01      	cmp	r3, #1
 800664a:	d03a      	beq.n	80066c2 <USBD_StdEPReq+0xee>
 800664c:	e115      	b.n	800687a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006654:	2b02      	cmp	r3, #2
 8006656:	d002      	beq.n	800665e <USBD_StdEPReq+0x8a>
 8006658:	2b03      	cmp	r3, #3
 800665a:	d015      	beq.n	8006688 <USBD_StdEPReq+0xb4>
 800665c:	e02b      	b.n	80066b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <USBD_StdEPReq+0xaa>
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	2b80      	cmp	r3, #128	; 0x80
 8006668:	d009      	beq.n	800667e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f002 faa4 	bl	8008bbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006674:	2180      	movs	r1, #128	; 0x80
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f002 faa0 	bl	8008bbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800667c:	e020      	b.n	80066c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc1e 	bl	8006ec2 <USBD_CtlError>
              break;
 8006686:	e01b      	b.n	80066c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	885b      	ldrh	r3, [r3, #2]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10e      	bne.n	80066ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <USBD_StdEPReq+0xda>
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	2b80      	cmp	r3, #128	; 0x80
 800669a:	d008      	beq.n	80066ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	88db      	ldrh	r3, [r3, #6]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d104      	bne.n	80066ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f002 fa87 	bl	8008bbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fccf 	bl	8007052 <USBD_CtlSendStatus>

              break;
 80066b4:	e004      	b.n	80066c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fc02 	bl	8006ec2 <USBD_CtlError>
              break;
 80066be:	bf00      	nop
          }
          break;
 80066c0:	e0e0      	b.n	8006884 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d002      	beq.n	80066d2 <USBD_StdEPReq+0xfe>
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d015      	beq.n	80066fc <USBD_StdEPReq+0x128>
 80066d0:	e026      	b.n	8006720 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00c      	beq.n	80066f2 <USBD_StdEPReq+0x11e>
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d009      	beq.n	80066f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f002 fa6a 	bl	8008bbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80066e8:	2180      	movs	r1, #128	; 0x80
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f002 fa66 	bl	8008bbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066f0:	e01c      	b.n	800672c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fbe4 	bl	8006ec2 <USBD_CtlError>
              break;
 80066fa:	e017      	b.n	800672c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	885b      	ldrh	r3, [r3, #2]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d112      	bne.n	800672a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f002 fa71 	bl	8008bfa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc9a 	bl	8007052 <USBD_CtlSendStatus>
              }
              break;
 800671e:	e004      	b.n	800672a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fbcd 	bl	8006ec2 <USBD_CtlError>
              break;
 8006728:	e000      	b.n	800672c <USBD_StdEPReq+0x158>
              break;
 800672a:	bf00      	nop
          }
          break;
 800672c:	e0aa      	b.n	8006884 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	2b02      	cmp	r3, #2
 8006736:	d002      	beq.n	800673e <USBD_StdEPReq+0x16a>
 8006738:	2b03      	cmp	r3, #3
 800673a:	d032      	beq.n	80067a2 <USBD_StdEPReq+0x1ce>
 800673c:	e097      	b.n	800686e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <USBD_StdEPReq+0x180>
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d004      	beq.n	8006754 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fbb8 	bl	8006ec2 <USBD_CtlError>
                break;
 8006752:	e091      	b.n	8006878 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006758:	2b00      	cmp	r3, #0
 800675a:	da0b      	bge.n	8006774 <USBD_StdEPReq+0x1a0>
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	3310      	adds	r3, #16
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	4413      	add	r3, r2
 8006770:	3304      	adds	r3, #4
 8006772:	e00b      	b.n	800678c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	3304      	adds	r3, #4
 800678c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2202      	movs	r2, #2
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fbfb 	bl	8006f96 <USBD_CtlSendData>
              break;
 80067a0:	e06a      	b.n	8006878 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da11      	bge.n	80067ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	f003 020f 	and.w	r2, r3, #15
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3318      	adds	r3, #24
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d117      	bne.n	80067f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fb7b 	bl	8006ec2 <USBD_CtlError>
                  break;
 80067cc:	e054      	b.n	8006878 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	f003 020f 	and.w	r2, r3, #15
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fb68 	bl	8006ec2 <USBD_CtlError>
                  break;
 80067f2:	e041      	b.n	8006878 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da0b      	bge.n	8006814 <USBD_StdEPReq+0x240>
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	3310      	adds	r3, #16
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4413      	add	r3, r2
 8006810:	3304      	adds	r3, #4
 8006812:	e00b      	b.n	800682c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4413      	add	r3, r2
 800682a:	3304      	adds	r3, #4
 800682c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <USBD_StdEPReq+0x266>
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	2b80      	cmp	r3, #128	; 0x80
 8006838:	d103      	bne.n	8006842 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	e00e      	b.n	8006860 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f002 f9f6 	bl	8008c38 <USBD_LL_IsStallEP>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2201      	movs	r2, #1
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e002      	b.n	8006860 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2202      	movs	r2, #2
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fb95 	bl	8006f96 <USBD_CtlSendData>
              break;
 800686c:	e004      	b.n	8006878 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fb26 	bl	8006ec2 <USBD_CtlError>
              break;
 8006876:	bf00      	nop
          }
          break;
 8006878:	e004      	b.n	8006884 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fb20 	bl	8006ec2 <USBD_CtlError>
          break;
 8006882:	bf00      	nop
      }
      break;
 8006884:	e004      	b.n	8006890 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fb1a 	bl	8006ec2 <USBD_CtlError>
      break;
 800688e:	bf00      	nop
  }

  return ret;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	885b      	ldrh	r3, [r3, #2]
 80068b6:	0a1b      	lsrs	r3, r3, #8
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	2b06      	cmp	r3, #6
 80068be:	f200 8128 	bhi.w	8006b12 <USBD_GetDescriptor+0x276>
 80068c2:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <USBD_GetDescriptor+0x2c>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068e5 	.word	0x080068e5
 80068cc:	080068fd 	.word	0x080068fd
 80068d0:	0800693d 	.word	0x0800693d
 80068d4:	08006b13 	.word	0x08006b13
 80068d8:	08006b13 	.word	0x08006b13
 80068dc:	08006ab3 	.word	0x08006ab3
 80068e0:	08006adf 	.word	0x08006adf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	7c12      	ldrb	r2, [r2, #16]
 80068f0:	f107 0108 	add.w	r1, r7, #8
 80068f4:	4610      	mov	r0, r2
 80068f6:	4798      	blx	r3
 80068f8:	60f8      	str	r0, [r7, #12]
      break;
 80068fa:	e112      	b.n	8006b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7c1b      	ldrb	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10d      	bne.n	8006920 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	f107 0208 	add.w	r2, r7, #8
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
 8006914:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	2202      	movs	r2, #2
 800691c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800691e:	e100      	b.n	8006b22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	f107 0208 	add.w	r2, r7, #8
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
 8006930:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	2202      	movs	r2, #2
 8006938:	701a      	strb	r2, [r3, #0]
      break;
 800693a:	e0f2      	b.n	8006b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	885b      	ldrh	r3, [r3, #2]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b05      	cmp	r3, #5
 8006944:	f200 80ac 	bhi.w	8006aa0 <USBD_GetDescriptor+0x204>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <USBD_GetDescriptor+0xb4>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	08006969 	.word	0x08006969
 8006954:	0800699d 	.word	0x0800699d
 8006958:	080069d1 	.word	0x080069d1
 800695c:	08006a05 	.word	0x08006a05
 8006960:	08006a39 	.word	0x08006a39
 8006964:	08006a6d 	.word	0x08006a6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	7c12      	ldrb	r2, [r2, #16]
 8006980:	f107 0108 	add.w	r1, r7, #8
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698a:	e091      	b.n	8006ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa97 	bl	8006ec2 <USBD_CtlError>
            err++;
 8006994:	7afb      	ldrb	r3, [r7, #11]
 8006996:	3301      	adds	r3, #1
 8006998:	72fb      	strb	r3, [r7, #11]
          break;
 800699a:	e089      	b.n	8006ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	7c12      	ldrb	r2, [r2, #16]
 80069b4:	f107 0108 	add.w	r1, r7, #8
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
 80069bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069be:	e077      	b.n	8006ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa7d 	bl	8006ec2 <USBD_CtlError>
            err++;
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	3301      	adds	r3, #1
 80069cc:	72fb      	strb	r3, [r7, #11]
          break;
 80069ce:	e06f      	b.n	8006ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7c12      	ldrb	r2, [r2, #16]
 80069e8:	f107 0108 	add.w	r1, r7, #8
 80069ec:	4610      	mov	r0, r2
 80069ee:	4798      	blx	r3
 80069f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f2:	e05d      	b.n	8006ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa63 	bl	8006ec2 <USBD_CtlError>
            err++;
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	3301      	adds	r3, #1
 8006a00:	72fb      	strb	r3, [r7, #11]
          break;
 8006a02:	e055      	b.n	8006ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	7c12      	ldrb	r2, [r2, #16]
 8006a1c:	f107 0108 	add.w	r1, r7, #8
 8006a20:	4610      	mov	r0, r2
 8006a22:	4798      	blx	r3
 8006a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a26:	e043      	b.n	8006ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa49 	bl	8006ec2 <USBD_CtlError>
            err++;
 8006a30:	7afb      	ldrb	r3, [r7, #11]
 8006a32:	3301      	adds	r3, #1
 8006a34:	72fb      	strb	r3, [r7, #11]
          break;
 8006a36:	e03b      	b.n	8006ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	7c12      	ldrb	r2, [r2, #16]
 8006a50:	f107 0108 	add.w	r1, r7, #8
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a5a:	e029      	b.n	8006ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa2f 	bl	8006ec2 <USBD_CtlError>
            err++;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	3301      	adds	r3, #1
 8006a68:	72fb      	strb	r3, [r7, #11]
          break;
 8006a6a:	e021      	b.n	8006ab0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	7c12      	ldrb	r2, [r2, #16]
 8006a84:	f107 0108 	add.w	r1, r7, #8
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
 8006a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a8e:	e00f      	b.n	8006ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa15 	bl	8006ec2 <USBD_CtlError>
            err++;
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a9e:	e007      	b.n	8006ab0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa0d 	bl	8006ec2 <USBD_CtlError>
          err++;
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006aae:	e038      	b.n	8006b22 <USBD_GetDescriptor+0x286>
 8006ab0:	e037      	b.n	8006b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7c1b      	ldrb	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f107 0208 	add.w	r2, r7, #8
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	4798      	blx	r3
 8006aca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006acc:	e029      	b.n	8006b22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f9f6 	bl	8006ec2 <USBD_CtlError>
        err++;
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	72fb      	strb	r3, [r7, #11]
      break;
 8006adc:	e021      	b.n	8006b22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	7c1b      	ldrb	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10d      	bne.n	8006b02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	f107 0208 	add.w	r2, r7, #8
 8006af2:	4610      	mov	r0, r2
 8006af4:	4798      	blx	r3
 8006af6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	2207      	movs	r2, #7
 8006afe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b00:	e00f      	b.n	8006b22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9dc 	bl	8006ec2 <USBD_CtlError>
        err++;
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b10:	e007      	b.n	8006b22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f9d4 	bl	8006ec2 <USBD_CtlError>
      err++;
 8006b1a:	7afb      	ldrb	r3, [r7, #11]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b20:	bf00      	nop
  }

  if (err != 0U)
 8006b22:	7afb      	ldrb	r3, [r7, #11]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d11c      	bne.n	8006b62 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006b28:	893b      	ldrh	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d011      	beq.n	8006b52 <USBD_GetDescriptor+0x2b6>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	88db      	ldrh	r3, [r3, #6]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	88da      	ldrh	r2, [r3, #6]
 8006b3a:	893b      	ldrh	r3, [r7, #8]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	bf28      	it	cs
 8006b40:	4613      	movcs	r3, r2
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b46:	893b      	ldrh	r3, [r7, #8]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa22 	bl	8006f96 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	88db      	ldrh	r3, [r3, #6]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa79 	bl	8007052 <USBD_CtlSendStatus>
 8006b60:	e000      	b.n	8006b64 <USBD_GetDescriptor+0x2c8>
    return;
 8006b62:	bf00      	nop
    }
  }
}
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop

08006b6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	889b      	ldrh	r3, [r3, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d130      	bne.n	8006be0 <USBD_SetAddress+0x74>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	88db      	ldrh	r3, [r3, #6]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d12c      	bne.n	8006be0 <USBD_SetAddress+0x74>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	885b      	ldrh	r3, [r3, #2]
 8006b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8c:	d828      	bhi.n	8006be0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	885b      	ldrh	r3, [r3, #2]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d104      	bne.n	8006bae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f98b 	bl	8006ec2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bac:	e01d      	b.n	8006bea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7bfa      	ldrb	r2, [r7, #15]
 8006bb2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f002 f868 	bl	8008c90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa46 	bl	8007052 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd4:	e009      	b.n	8006bea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bde:	e004      	b.n	8006bea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f96d 	bl	8006ec2 <USBD_CtlError>
  }
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	885b      	ldrh	r3, [r3, #2]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	4b41      	ldr	r3, [pc, #260]	; (8006d0c <USBD_SetConfig+0x118>)
 8006c06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c08:	4b40      	ldr	r3, [pc, #256]	; (8006d0c <USBD_SetConfig+0x118>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d904      	bls.n	8006c1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f955 	bl	8006ec2 <USBD_CtlError>
 8006c18:	e075      	b.n	8006d06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d002      	beq.n	8006c2a <USBD_SetConfig+0x36>
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d023      	beq.n	8006c70 <USBD_SetConfig+0x7c>
 8006c28:	e062      	b.n	8006cf0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c2a:	4b38      	ldr	r3, [pc, #224]	; (8006d0c <USBD_SetConfig+0x118>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01a      	beq.n	8006c68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006c32:	4b36      	ldr	r3, [pc, #216]	; (8006d0c <USBD_SetConfig+0x118>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2203      	movs	r2, #3
 8006c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c44:	4b31      	ldr	r3, [pc, #196]	; (8006d0c <USBD_SetConfig+0x118>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff f9e7 	bl	800601e <USBD_SetClassConfig>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d104      	bne.n	8006c60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f932 	bl	8006ec2 <USBD_CtlError>
            return;
 8006c5e:	e052      	b.n	8006d06 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9f6 	bl	8007052 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c66:	e04e      	b.n	8006d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f9f2 	bl	8007052 <USBD_CtlSendStatus>
        break;
 8006c6e:	e04a      	b.n	8006d06 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c70:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <USBD_SetConfig+0x118>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d112      	bne.n	8006c9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c80:	4b22      	ldr	r3, [pc, #136]	; (8006d0c <USBD_SetConfig+0x118>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c8a:	4b20      	ldr	r3, [pc, #128]	; (8006d0c <USBD_SetConfig+0x118>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f9e3 	bl	800605c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9db 	bl	8007052 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c9c:	e033      	b.n	8006d06 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c9e:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <USBD_SetConfig+0x118>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d01d      	beq.n	8006ce8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff f9d1 	bl	800605c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <USBD_SetConfig+0x118>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006cc4:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <USBD_SetConfig+0x118>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff f9a7 	bl	800601e <USBD_SetClassConfig>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d104      	bne.n	8006ce0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8f2 	bl	8006ec2 <USBD_CtlError>
            return;
 8006cde:	e012      	b.n	8006d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f9b6 	bl	8007052 <USBD_CtlSendStatus>
        break;
 8006ce6:	e00e      	b.n	8006d06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f9b2 	bl	8007052 <USBD_CtlSendStatus>
        break;
 8006cee:	e00a      	b.n	8006d06 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f8e5 	bl	8006ec2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <USBD_SetConfig+0x118>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff f9ac 	bl	800605c <USBD_ClrClassConfig>
        break;
 8006d04:	bf00      	nop
    }
  }
}
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	200004c8 	.word	0x200004c8

08006d10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	88db      	ldrh	r3, [r3, #6]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d004      	beq.n	8006d2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f8cc 	bl	8006ec2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d2a:	e022      	b.n	8006d72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	dc02      	bgt.n	8006d3c <USBD_GetConfig+0x2c>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	dc03      	bgt.n	8006d42 <USBD_GetConfig+0x32>
 8006d3a:	e015      	b.n	8006d68 <USBD_GetConfig+0x58>
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d00b      	beq.n	8006d58 <USBD_GetConfig+0x48>
 8006d40:	e012      	b.n	8006d68 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f920 	bl	8006f96 <USBD_CtlSendData>
        break;
 8006d56:	e00c      	b.n	8006d72 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f918 	bl	8006f96 <USBD_CtlSendData>
        break;
 8006d66:	e004      	b.n	8006d72 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f8a9 	bl	8006ec2 <USBD_CtlError>
        break;
 8006d70:	bf00      	nop
}
 8006d72:	bf00      	nop
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d81e      	bhi.n	8006dce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	88db      	ldrh	r3, [r3, #6]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d004      	beq.n	8006da2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f891 	bl	8006ec2 <USBD_CtlError>
        break;
 8006da0:	e01a      	b.n	8006dd8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f043 0202 	orr.w	r2, r3, #2
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f8e5 	bl	8006f96 <USBD_CtlSendData>
      break;
 8006dcc:	e004      	b.n	8006dd8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f876 	bl	8006ec2 <USBD_CtlError>
      break;
 8006dd6:	bf00      	nop
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	885b      	ldrh	r3, [r3, #2]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d106      	bne.n	8006e00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f929 	bl	8007052 <USBD_CtlSendStatus>
  }
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d80b      	bhi.n	8006e36 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	885b      	ldrh	r3, [r3, #2]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d10c      	bne.n	8006e40 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f90f 	bl	8007052 <USBD_CtlSendStatus>
      }
      break;
 8006e34:	e004      	b.n	8006e40 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f842 	bl	8006ec2 <USBD_CtlError>
      break;
 8006e3e:	e000      	b.n	8006e42 <USBD_ClrFeature+0x3a>
      break;
 8006e40:	bf00      	nop
  }
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	785a      	ldrb	r2, [r3, #1]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	3302      	adds	r3, #2
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	3303      	adds	r3, #3
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	4413      	add	r3, r2
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	3304      	adds	r3, #4
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	3305      	adds	r3, #5
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	4413      	add	r3, r2
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	3306      	adds	r3, #6
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3307      	adds	r3, #7
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	80da      	strh	r2, [r3, #6]

}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr

08006ec2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006ecc:	2180      	movs	r1, #128	; 0x80
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fe74 	bl	8008bbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fe70 	bl	8008bbc <USBD_LL_StallEP>
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d032      	beq.n	8006f60 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f834 	bl	8006f68 <USBD_GetLen>
 8006f00:	4603      	mov	r3, r0
 8006f02:	3301      	adds	r3, #1
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	75fa      	strb	r2, [r7, #23]
 8006f14:	461a      	mov	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4413      	add	r3, r2
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	7812      	ldrb	r2, [r2, #0]
 8006f1e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	75fa      	strb	r2, [r7, #23]
 8006f26:	461a      	mov	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f30:	e012      	b.n	8006f58 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	60fa      	str	r2, [r7, #12]
 8006f38:	7dfa      	ldrb	r2, [r7, #23]
 8006f3a:	1c51      	adds	r1, r2, #1
 8006f3c:	75f9      	strb	r1, [r7, #23]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	440a      	add	r2, r1
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	75fa      	strb	r2, [r7, #23]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4413      	add	r3, r2
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e8      	bne.n	8006f32 <USBD_GetString+0x4e>
    }
  }
}
 8006f60:	bf00      	nop
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f74:	e005      	b.n	8006f82 <USBD_GetLen+0x1a>
  {
    len++;
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f5      	bne.n	8006f76 <USBD_GetLen+0xe>
  }

  return len;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr

08006f96 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006fac:	88fa      	ldrh	r2, [r7, #6]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f001 fe85 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fdc:	88fb      	ldrh	r3, [r7, #6]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f001 fe73 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2203      	movs	r2, #3
 8007004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007008:	88fa      	ldrh	r2, [r7, #6]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007010:	88fa      	ldrh	r2, [r7, #6]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	2100      	movs	r1, #0
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f001 fe78 	bl	8008d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	4613      	mov	r3, r2
 800703a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	2100      	movs	r1, #0
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f001 fe66 	bl	8008d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2204      	movs	r2, #4
 800705e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007062:	2300      	movs	r3, #0
 8007064:	2200      	movs	r2, #0
 8007066:	2100      	movs	r1, #0
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fe30 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2205      	movs	r2, #5
 8007084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007088:	2300      	movs	r3, #0
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 fe40 	bl	8008d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	4603      	mov	r3, r0
 80070a6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070b0:	2b84      	cmp	r3, #132	; 0x84
 80070b2:	d005      	beq.n	80070c0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	3303      	adds	r3, #3
 80070be:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070c0:	68fb      	ldr	r3, [r7, #12]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80070d0:	f000 fae8 	bl	80076a4 <vTaskStartScheduler>
  
  return osOK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	bd80      	pop	{r7, pc}

080070da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070dc:	b089      	sub	sp, #36	; 0x24
 80070de:	af04      	add	r7, sp, #16
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d020      	beq.n	800712e <osThreadCreate+0x54>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01c      	beq.n	800712e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685c      	ldr	r4, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681d      	ldr	r5, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691e      	ldr	r6, [r3, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff ffc9 	bl	800709e <makeFreeRtosPriority>
 800710c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007116:	9202      	str	r2, [sp, #8]
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	9100      	str	r1, [sp, #0]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	4632      	mov	r2, r6
 8007120:	4629      	mov	r1, r5
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f8e8 	bl	80072f8 <xTaskCreateStatic>
 8007128:	4603      	mov	r3, r0
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e01c      	b.n	8007168 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685c      	ldr	r4, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800713a:	b29e      	uxth	r6, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff ffab 	bl	800709e <makeFreeRtosPriority>
 8007148:	4602      	mov	r2, r0
 800714a:	f107 030c 	add.w	r3, r7, #12
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	9200      	str	r2, [sp, #0]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	4632      	mov	r2, r6
 8007156:	4629      	mov	r1, r5
 8007158:	4620      	mov	r0, r4
 800715a:	f000 f929 	bl	80073b0 <xTaskCreate>
 800715e:	4603      	mov	r3, r0
 8007160:	2b01      	cmp	r3, #1
 8007162:	d001      	beq.n	8007168 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	e000      	b.n	800716a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007168:	68fb      	ldr	r3, [r7, #12]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007172 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <osDelay+0x16>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	e000      	b.n	800718a <osDelay+0x18>
 8007188:	2301      	movs	r3, #1
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fa56 	bl	800763c <vTaskDelay>
  
  return osOK;
 8007190:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f103 0208 	add.w	r2, r3, #8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f04f 32ff 	mov.w	r2, #4294967295
 80071b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f103 0208 	add.w	r2, r3, #8
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f103 0208 	add.w	r2, r3, #8
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	601a      	str	r2, [r3, #0]
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr

08007236 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d103      	bne.n	8007256 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	e00c      	b.n	8007270 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3308      	adds	r3, #8
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e002      	b.n	8007264 <vListInsert+0x2e>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	429a      	cmp	r2, r3
 800726e:	d2f6      	bcs.n	800725e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]
}
 800729c:	bf00      	nop
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr

080072a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6892      	ldr	r2, [r2, #8]
 80072bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6852      	ldr	r2, [r2, #4]
 80072c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d103      	bne.n	80072da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr

080072f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08e      	sub	sp, #56	; 0x38
 80072fc:	af04      	add	r7, sp, #16
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <xTaskCreateStatic+0x46>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	61fb      	str	r3, [r7, #28]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800733e:	23b4      	movs	r3, #180	; 0xb4
 8007340:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2bb4      	cmp	r3, #180	; 0xb4
 8007346:	d00a      	beq.n	800735e <xTaskCreateStatic+0x66>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	61bb      	str	r3, [r7, #24]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01e      	beq.n	80073a2 <xTaskCreateStatic+0xaa>
 8007364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01b      	beq.n	80073a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007372:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	2202      	movs	r2, #2
 8007378:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800737c:	2300      	movs	r3, #0
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	9302      	str	r3, [sp, #8]
 8007384:	f107 0314 	add.w	r3, r7, #20
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f851 	bl	800743c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800739a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800739c:	f000 f8e4 	bl	8007568 <prvAddNewTaskToReadyList>
 80073a0:	e001      	b.n	80073a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073a6:	697b      	ldr	r3, [r7, #20]
	}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3728      	adds	r7, #40	; 0x28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08c      	sub	sp, #48	; 0x30
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	4613      	mov	r3, r2
 80073be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 feb3 	bl	8008130 <pvPortMalloc>
 80073ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00e      	beq.n	80073f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073d2:	20b4      	movs	r0, #180	; 0xb4
 80073d4:	f000 feac 	bl	8008130 <pvPortMalloc>
 80073d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
 80073e6:	e005      	b.n	80073f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073e8:	6978      	ldr	r0, [r7, #20]
 80073ea:	f000 ff65 	bl	80082b8 <vPortFree>
 80073ee:	e001      	b.n	80073f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d017      	beq.n	800742a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	2300      	movs	r3, #0
 8007406:	9303      	str	r3, [sp, #12]
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	9302      	str	r3, [sp, #8]
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f80f 	bl	800743c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800741e:	69f8      	ldr	r0, [r7, #28]
 8007420:	f000 f8a2 	bl	8007568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007424:	2301      	movs	r3, #1
 8007426:	61bb      	str	r3, [r7, #24]
 8007428:	e002      	b.n	8007430 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800742a:	f04f 33ff 	mov.w	r3, #4294967295
 800742e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007430:	69bb      	ldr	r3, [r7, #24]
	}
 8007432:	4618      	mov	r0, r3
 8007434:	3720      	adds	r7, #32
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007454:	3b01      	subs	r3, #1
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f023 0307 	bic.w	r3, r3, #7
 8007462:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <prvInitialiseNewTask+0x48>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	617b      	str	r3, [r7, #20]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e012      	b.n	80074b0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	7819      	ldrb	r1, [r3, #0]
 8007492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	3334      	adds	r3, #52	; 0x34
 800749a:	460a      	mov	r2, r1
 800749c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d006      	beq.n	80074b8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	3301      	adds	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2b0f      	cmp	r3, #15
 80074b4:	d9e9      	bls.n	800748a <prvInitialiseNewTask+0x4e>
 80074b6:	e000      	b.n	80074ba <prvInitialiseNewTask+0x7e>
		{
			break;
 80074b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d901      	bls.n	80074cc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074c8:	2306      	movs	r3, #6
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	2200      	movs	r2, #0
 80074dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	3304      	adds	r3, #4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fe78 	bl	80071d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	3318      	adds	r3, #24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fe73 	bl	80071d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	f1c3 0207 	rsb	r2, r3, #7
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	2200      	movs	r2, #0
 8007514:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	334c      	adds	r3, #76	; 0x4c
 800751c:	2260      	movs	r2, #96	; 0x60
 800751e:	2100      	movs	r1, #0
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fc9f 	bl	8008e64 <memset>
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	4a0c      	ldr	r2, [pc, #48]	; (800755c <prvInitialiseNewTask+0x120>)
 800752a:	651a      	str	r2, [r3, #80]	; 0x50
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <prvInitialiseNewTask+0x124>)
 8007530:	655a      	str	r2, [r3, #84]	; 0x54
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	4a0b      	ldr	r2, [pc, #44]	; (8007564 <prvInitialiseNewTask+0x128>)
 8007536:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	69b8      	ldr	r0, [r7, #24]
 800753e:	f000 fc47 	bl	8007dd0 <pxPortInitialiseStack>
 8007542:	4602      	mov	r2, r0
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007554:	bf00      	nop
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	08009120 	.word	0x08009120
 8007560:	08009140 	.word	0x08009140
 8007564:	08009100 	.word	0x08009100

08007568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007570:	f000 fd1c 	bl	8007fac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007574:	4b2a      	ldr	r3, [pc, #168]	; (8007620 <prvAddNewTaskToReadyList+0xb8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	4a29      	ldr	r2, [pc, #164]	; (8007620 <prvAddNewTaskToReadyList+0xb8>)
 800757c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800757e:	4b29      	ldr	r3, [pc, #164]	; (8007624 <prvAddNewTaskToReadyList+0xbc>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007586:	4a27      	ldr	r2, [pc, #156]	; (8007624 <prvAddNewTaskToReadyList+0xbc>)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800758c:	4b24      	ldr	r3, [pc, #144]	; (8007620 <prvAddNewTaskToReadyList+0xb8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d110      	bne.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007594:	f000 fad2 	bl	8007b3c <prvInitialiseTaskLists>
 8007598:	e00d      	b.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800759a:	4b23      	ldr	r3, [pc, #140]	; (8007628 <prvAddNewTaskToReadyList+0xc0>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075a2:	4b20      	ldr	r3, [pc, #128]	; (8007624 <prvAddNewTaskToReadyList+0xbc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d802      	bhi.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b0:	4a1c      	ldr	r2, [pc, #112]	; (8007624 <prvAddNewTaskToReadyList+0xbc>)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075b6:	4b1d      	ldr	r3, [pc, #116]	; (800762c <prvAddNewTaskToReadyList+0xc4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	4a1b      	ldr	r2, [pc, #108]	; (800762c <prvAddNewTaskToReadyList+0xc4>)
 80075be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	2201      	movs	r2, #1
 80075c6:	409a      	lsls	r2, r3
 80075c8:	4b19      	ldr	r3, [pc, #100]	; (8007630 <prvAddNewTaskToReadyList+0xc8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	4a18      	ldr	r2, [pc, #96]	; (8007630 <prvAddNewTaskToReadyList+0xc8>)
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4a15      	ldr	r2, [pc, #84]	; (8007634 <prvAddNewTaskToReadyList+0xcc>)
 80075e0:	441a      	add	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f7ff fe01 	bl	80071f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075ee:	f000 fd0d 	bl	800800c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075f2:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <prvAddNewTaskToReadyList+0xc0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00e      	beq.n	8007618 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075fa:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <prvAddNewTaskToReadyList+0xbc>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	429a      	cmp	r2, r3
 8007606:	d207      	bcs.n	8007618 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007608:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <prvAddNewTaskToReadyList+0xd0>)
 800760a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200005cc 	.word	0x200005cc
 8007624:	200004cc 	.word	0x200004cc
 8007628:	200005d8 	.word	0x200005d8
 800762c:	200005e8 	.word	0x200005e8
 8007630:	200005d4 	.word	0x200005d4
 8007634:	200004d0 	.word	0x200004d0
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d017      	beq.n	800767e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <vTaskDelay+0x60>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <vTaskDelay+0x30>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	60bb      	str	r3, [r7, #8]
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800766c:	f000 f884 	bl	8007778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007670:	2100      	movs	r1, #0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fb46 	bl	8007d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007678:	f000 f88c 	bl	8007794 <xTaskResumeAll>
 800767c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d107      	bne.n	8007694 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <vTaskDelay+0x64>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	200005f4 	.word	0x200005f4
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	; 0x28
 80076a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076b2:	463a      	mov	r2, r7
 80076b4:	1d39      	adds	r1, r7, #4
 80076b6:	f107 0308 	add.w	r3, r7, #8
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7f8 fd50 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	9202      	str	r2, [sp, #8]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2300      	movs	r3, #0
 80076d0:	460a      	mov	r2, r1
 80076d2:	4921      	ldr	r1, [pc, #132]	; (8007758 <vTaskStartScheduler+0xb4>)
 80076d4:	4821      	ldr	r0, [pc, #132]	; (800775c <vTaskStartScheduler+0xb8>)
 80076d6:	f7ff fe0f 	bl	80072f8 <xTaskCreateStatic>
 80076da:	4603      	mov	r3, r0
 80076dc:	4a20      	ldr	r2, [pc, #128]	; (8007760 <vTaskStartScheduler+0xbc>)
 80076de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076e0:	4b1f      	ldr	r3, [pc, #124]	; (8007760 <vTaskStartScheduler+0xbc>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076e8:	2301      	movs	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e001      	b.n	80076f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d11b      	bne.n	8007730 <vTaskStartScheduler+0x8c>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	613b      	str	r3, [r7, #16]
}
 800770a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800770c:	4b15      	ldr	r3, [pc, #84]	; (8007764 <vTaskStartScheduler+0xc0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	334c      	adds	r3, #76	; 0x4c
 8007712:	4a15      	ldr	r2, [pc, #84]	; (8007768 <vTaskStartScheduler+0xc4>)
 8007714:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007716:	4b15      	ldr	r3, [pc, #84]	; (800776c <vTaskStartScheduler+0xc8>)
 8007718:	f04f 32ff 	mov.w	r2, #4294967295
 800771c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800771e:	4b14      	ldr	r3, [pc, #80]	; (8007770 <vTaskStartScheduler+0xcc>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007724:	4b13      	ldr	r3, [pc, #76]	; (8007774 <vTaskStartScheduler+0xd0>)
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800772a:	f000 fbcd 	bl	8007ec8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800772e:	e00e      	b.n	800774e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d10a      	bne.n	800774e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	60fb      	str	r3, [r7, #12]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <vTaskStartScheduler+0xa8>
}
 800774e:	bf00      	nop
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	080090a0 	.word	0x080090a0
 800775c:	08007b0d 	.word	0x08007b0d
 8007760:	200005f0 	.word	0x200005f0
 8007764:	200004cc 	.word	0x200004cc
 8007768:	20000184 	.word	0x20000184
 800776c:	200005ec 	.word	0x200005ec
 8007770:	200005d8 	.word	0x200005d8
 8007774:	200005d0 	.word	0x200005d0

08007778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <vTaskSuspendAll+0x18>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3301      	adds	r3, #1
 8007782:	4a03      	ldr	r2, [pc, #12]	; (8007790 <vTaskSuspendAll+0x18>)
 8007784:	6013      	str	r3, [r2, #0]
}
 8007786:	bf00      	nop
 8007788:	46bd      	mov	sp, r7
 800778a:	bc80      	pop	{r7}
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	200005f4 	.word	0x200005f4

08007794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077a2:	4b41      	ldr	r3, [pc, #260]	; (80078a8 <xTaskResumeAll+0x114>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10a      	bne.n	80077c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	603b      	str	r3, [r7, #0]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077c0:	f000 fbf4 	bl	8007fac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077c4:	4b38      	ldr	r3, [pc, #224]	; (80078a8 <xTaskResumeAll+0x114>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	4a37      	ldr	r2, [pc, #220]	; (80078a8 <xTaskResumeAll+0x114>)
 80077cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ce:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <xTaskResumeAll+0x114>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d161      	bne.n	800789a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077d6:	4b35      	ldr	r3, [pc, #212]	; (80078ac <xTaskResumeAll+0x118>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d05d      	beq.n	800789a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077de:	e02e      	b.n	800783e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80077e0:	4b33      	ldr	r3, [pc, #204]	; (80078b0 <xTaskResumeAll+0x11c>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3318      	adds	r3, #24
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff fd5a 	bl	80072a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fd55 	bl	80072a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	2201      	movs	r2, #1
 8007802:	409a      	lsls	r2, r3
 8007804:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <xTaskResumeAll+0x120>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4313      	orrs	r3, r2
 800780a:	4a2a      	ldr	r2, [pc, #168]	; (80078b4 <xTaskResumeAll+0x120>)
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4a27      	ldr	r2, [pc, #156]	; (80078b8 <xTaskResumeAll+0x124>)
 800781c:	441a      	add	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3304      	adds	r3, #4
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f7ff fce3 	bl	80071f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782e:	4b23      	ldr	r3, [pc, #140]	; (80078bc <xTaskResumeAll+0x128>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	429a      	cmp	r2, r3
 8007836:	d302      	bcc.n	800783e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007838:	4b21      	ldr	r3, [pc, #132]	; (80078c0 <xTaskResumeAll+0x12c>)
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800783e:	4b1c      	ldr	r3, [pc, #112]	; (80078b0 <xTaskResumeAll+0x11c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1cc      	bne.n	80077e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800784c:	f000 fa18 	bl	8007c80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007850:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <xTaskResumeAll+0x130>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d010      	beq.n	800787e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800785c:	f000 f836 	bl	80078cc <xTaskIncrementTick>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007866:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <xTaskResumeAll+0x12c>)
 8007868:	2201      	movs	r2, #1
 800786a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3b01      	subs	r3, #1
 8007870:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1f1      	bne.n	800785c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007878:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <xTaskResumeAll+0x130>)
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <xTaskResumeAll+0x12c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007886:	2301      	movs	r3, #1
 8007888:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <xTaskResumeAll+0x134>)
 800788c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800789a:	f000 fbb7 	bl	800800c <vPortExitCritical>

	return xAlreadyYielded;
 800789e:	68bb      	ldr	r3, [r7, #8]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	200005f4 	.word	0x200005f4
 80078ac:	200005cc 	.word	0x200005cc
 80078b0:	2000058c 	.word	0x2000058c
 80078b4:	200005d4 	.word	0x200005d4
 80078b8:	200004d0 	.word	0x200004d0
 80078bc:	200004cc 	.word	0x200004cc
 80078c0:	200005e0 	.word	0x200005e0
 80078c4:	200005dc 	.word	0x200005dc
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d6:	4b51      	ldr	r3, [pc, #324]	; (8007a1c <xTaskIncrementTick+0x150>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 808d 	bne.w	80079fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078e0:	4b4f      	ldr	r3, [pc, #316]	; (8007a20 <xTaskIncrementTick+0x154>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078e8:	4a4d      	ldr	r2, [pc, #308]	; (8007a20 <xTaskIncrementTick+0x154>)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d120      	bne.n	8007936 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078f4:	4b4b      	ldr	r3, [pc, #300]	; (8007a24 <xTaskIncrementTick+0x158>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <xTaskIncrementTick+0x48>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	603b      	str	r3, [r7, #0]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <xTaskIncrementTick+0x46>
 8007914:	4b43      	ldr	r3, [pc, #268]	; (8007a24 <xTaskIncrementTick+0x158>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	4b43      	ldr	r3, [pc, #268]	; (8007a28 <xTaskIncrementTick+0x15c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a41      	ldr	r2, [pc, #260]	; (8007a24 <xTaskIncrementTick+0x158>)
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	4a41      	ldr	r2, [pc, #260]	; (8007a28 <xTaskIncrementTick+0x15c>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	4b40      	ldr	r3, [pc, #256]	; (8007a2c <xTaskIncrementTick+0x160>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3301      	adds	r3, #1
 800792e:	4a3f      	ldr	r2, [pc, #252]	; (8007a2c <xTaskIncrementTick+0x160>)
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	f000 f9a5 	bl	8007c80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007936:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <xTaskIncrementTick+0x164>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	429a      	cmp	r2, r3
 800793e:	d34d      	bcc.n	80079dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007940:	4b38      	ldr	r3, [pc, #224]	; (8007a24 <xTaskIncrementTick+0x158>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <xTaskIncrementTick+0x82>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <xTaskIncrementTick+0x84>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007954:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <xTaskIncrementTick+0x164>)
 8007956:	f04f 32ff 	mov.w	r2, #4294967295
 800795a:	601a      	str	r2, [r3, #0]
					break;
 800795c:	e03e      	b.n	80079dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800795e:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <xTaskIncrementTick+0x158>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d203      	bcs.n	800797e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007976:	4a2e      	ldr	r2, [pc, #184]	; (8007a30 <xTaskIncrementTick+0x164>)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6013      	str	r3, [r2, #0]
						break;
 800797c:	e02e      	b.n	80079dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fc8f 	bl	80072a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	2b00      	cmp	r3, #0
 800798e:	d004      	beq.n	800799a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3318      	adds	r3, #24
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff fc86 	bl	80072a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	2201      	movs	r2, #1
 80079a0:	409a      	lsls	r2, r3
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <xTaskIncrementTick+0x168>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <xTaskIncrementTick+0x168>)
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <xTaskIncrementTick+0x16c>)
 80079ba:	441a      	add	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	3304      	adds	r3, #4
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	f7ff fc14 	bl	80071f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079cc:	4b1b      	ldr	r3, [pc, #108]	; (8007a3c <xTaskIncrementTick+0x170>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d3b4      	bcc.n	8007940 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079d6:	2301      	movs	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079da:	e7b1      	b.n	8007940 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079dc:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <xTaskIncrementTick+0x170>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e2:	4915      	ldr	r1, [pc, #84]	; (8007a38 <xTaskIncrementTick+0x16c>)
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d907      	bls.n	8007a04 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	e004      	b.n	8007a04 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079fa:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <xTaskIncrementTick+0x174>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3301      	adds	r3, #1
 8007a00:	4a0f      	ldr	r2, [pc, #60]	; (8007a40 <xTaskIncrementTick+0x174>)
 8007a02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xTaskIncrementTick+0x178>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a10:	697b      	ldr	r3, [r7, #20]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200005f4 	.word	0x200005f4
 8007a20:	200005d0 	.word	0x200005d0
 8007a24:	20000584 	.word	0x20000584
 8007a28:	20000588 	.word	0x20000588
 8007a2c:	200005e4 	.word	0x200005e4
 8007a30:	200005ec 	.word	0x200005ec
 8007a34:	200005d4 	.word	0x200005d4
 8007a38:	200004d0 	.word	0x200004d0
 8007a3c:	200004cc 	.word	0x200004cc
 8007a40:	200005dc 	.word	0x200005dc
 8007a44:	200005e0 	.word	0x200005e0

08007a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a4e:	4b29      	ldr	r3, [pc, #164]	; (8007af4 <vTaskSwitchContext+0xac>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a56:	4b28      	ldr	r3, [pc, #160]	; (8007af8 <vTaskSwitchContext+0xb0>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a5c:	e044      	b.n	8007ae8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007a5e:	4b26      	ldr	r3, [pc, #152]	; (8007af8 <vTaskSwitchContext+0xb0>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a64:	4b25      	ldr	r3, [pc, #148]	; (8007afc <vTaskSwitchContext+0xb4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	fab3 f383 	clz	r3, r3
 8007a70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	f1c3 031f 	rsb	r3, r3, #31
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	4921      	ldr	r1, [pc, #132]	; (8007b00 <vTaskSwitchContext+0xb8>)
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	440b      	add	r3, r1
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <vTaskSwitchContext+0x5a>
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4a14      	ldr	r2, [pc, #80]	; (8007b00 <vTaskSwitchContext+0xb8>)
 8007ab0:	4413      	add	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d104      	bne.n	8007ad4 <vTaskSwitchContext+0x8c>
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	605a      	str	r2, [r3, #4]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	4a0a      	ldr	r2, [pc, #40]	; (8007b04 <vTaskSwitchContext+0xbc>)
 8007adc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ade:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <vTaskSwitchContext+0xbc>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	334c      	adds	r3, #76	; 0x4c
 8007ae4:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <vTaskSwitchContext+0xc0>)
 8007ae6:	6013      	str	r3, [r2, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	200005f4 	.word	0x200005f4
 8007af8:	200005e0 	.word	0x200005e0
 8007afc:	200005d4 	.word	0x200005d4
 8007b00:	200004d0 	.word	0x200004d0
 8007b04:	200004cc 	.word	0x200004cc
 8007b08:	20000184 	.word	0x20000184

08007b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b14:	f000 f852 	bl	8007bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b18:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <prvIdleTask+0x28>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d9f9      	bls.n	8007b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <prvIdleTask+0x2c>)
 8007b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b30:	e7f0      	b.n	8007b14 <prvIdleTask+0x8>
 8007b32:	bf00      	nop
 8007b34:	200004d0 	.word	0x200004d0
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	e00c      	b.n	8007b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a12      	ldr	r2, [pc, #72]	; (8007b9c <prvInitialiseTaskLists+0x60>)
 8007b54:	4413      	add	r3, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff fb1f 	bl	800719a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d9ef      	bls.n	8007b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b68:	480d      	ldr	r0, [pc, #52]	; (8007ba0 <prvInitialiseTaskLists+0x64>)
 8007b6a:	f7ff fb16 	bl	800719a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b6e:	480d      	ldr	r0, [pc, #52]	; (8007ba4 <prvInitialiseTaskLists+0x68>)
 8007b70:	f7ff fb13 	bl	800719a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b74:	480c      	ldr	r0, [pc, #48]	; (8007ba8 <prvInitialiseTaskLists+0x6c>)
 8007b76:	f7ff fb10 	bl	800719a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b7a:	480c      	ldr	r0, [pc, #48]	; (8007bac <prvInitialiseTaskLists+0x70>)
 8007b7c:	f7ff fb0d 	bl	800719a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b80:	480b      	ldr	r0, [pc, #44]	; (8007bb0 <prvInitialiseTaskLists+0x74>)
 8007b82:	f7ff fb0a 	bl	800719a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <prvInitialiseTaskLists+0x78>)
 8007b88:	4a05      	ldr	r2, [pc, #20]	; (8007ba0 <prvInitialiseTaskLists+0x64>)
 8007b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <prvInitialiseTaskLists+0x7c>)
 8007b8e:	4a05      	ldr	r2, [pc, #20]	; (8007ba4 <prvInitialiseTaskLists+0x68>)
 8007b90:	601a      	str	r2, [r3, #0]
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200004d0 	.word	0x200004d0
 8007ba0:	2000055c 	.word	0x2000055c
 8007ba4:	20000570 	.word	0x20000570
 8007ba8:	2000058c 	.word	0x2000058c
 8007bac:	200005a0 	.word	0x200005a0
 8007bb0:	200005b8 	.word	0x200005b8
 8007bb4:	20000584 	.word	0x20000584
 8007bb8:	20000588 	.word	0x20000588

08007bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bc2:	e019      	b.n	8007bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bc4:	f000 f9f2 	bl	8007fac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007bc8:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <prvCheckTasksWaitingTermination+0x50>)
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff fb66 	bl	80072a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <prvCheckTasksWaitingTermination+0x54>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	4a0b      	ldr	r2, [pc, #44]	; (8007c10 <prvCheckTasksWaitingTermination+0x54>)
 8007be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	4a0a      	ldr	r2, [pc, #40]	; (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bee:	f000 fa0d 	bl	800800c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f810 	bl	8007c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bf8:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e1      	bne.n	8007bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	200005a0 	.word	0x200005a0
 8007c10:	200005cc 	.word	0x200005cc
 8007c14:	200005b4 	.word	0x200005b4

08007c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	334c      	adds	r3, #76	; 0x4c
 8007c24:	4618      	mov	r0, r3
 8007c26:	f001 f933 	bl	8008e90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d108      	bne.n	8007c46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fb3d 	bl	80082b8 <vPortFree>
				vPortFree( pxTCB );
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb3a 	bl	80082b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c44:	e018      	b.n	8007c78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d103      	bne.n	8007c58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fb31 	bl	80082b8 <vPortFree>
	}
 8007c56:	e00f      	b.n	8007c78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d00a      	beq.n	8007c78 <prvDeleteTCB+0x60>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60fb      	str	r3, [r7, #12]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <prvDeleteTCB+0x5e>
	}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c86:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <prvResetNextTaskUnblockTime+0x40>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <prvResetNextTaskUnblockTime+0x14>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <prvResetNextTaskUnblockTime+0x16>
 8007c94:	2300      	movs	r3, #0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c9a:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <prvResetNextTaskUnblockTime+0x44>)
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ca2:	e008      	b.n	8007cb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <prvResetNextTaskUnblockTime+0x40>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	4a04      	ldr	r2, [pc, #16]	; (8007cc4 <prvResetNextTaskUnblockTime+0x44>)
 8007cb4:	6013      	str	r3, [r2, #0]
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr
 8007cc0:	20000584 	.word	0x20000584
 8007cc4:	200005ec 	.word	0x200005ec

08007cc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cce:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <xTaskGetSchedulerState+0x34>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	e008      	b.n	8007cee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cdc:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <xTaskGetSchedulerState+0x38>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	607b      	str	r3, [r7, #4]
 8007ce8:	e001      	b.n	8007cee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cee:	687b      	ldr	r3, [r7, #4]
	}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	200005d8 	.word	0x200005d8
 8007d00:	200005f4 	.word	0x200005f4

08007d04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d0e:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d14:	4b28      	ldr	r3, [pc, #160]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fac3 	bl	80072a6 <uxListRemove>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007d26:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	43da      	mvns	r2, r3
 8007d34:	4b21      	ldr	r3, [pc, #132]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	4a20      	ldr	r2, [pc, #128]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d10a      	bne.n	8007d5c <prvAddCurrentTaskToDelayedList+0x58>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	481a      	ldr	r0, [pc, #104]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d56:	f7ff fa4b 	bl	80071f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d5a:	e026      	b.n	8007daa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4413      	add	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d64:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d209      	bcs.n	8007d88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4610      	mov	r0, r2
 8007d82:	f7ff fa58 	bl	8007236 <vListInsert>
}
 8007d86:	e010      	b.n	8007daa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d88:	4b0f      	ldr	r3, [pc, #60]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3304      	adds	r3, #4
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f7ff fa4e 	bl	8007236 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d9a:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d202      	bcs.n	8007daa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007da4:	4a09      	ldr	r2, [pc, #36]	; (8007dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6013      	str	r3, [r2, #0]
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	200005d0 	.word	0x200005d0
 8007db8:	200004cc 	.word	0x200004cc
 8007dbc:	200005d4 	.word	0x200005d4
 8007dc0:	200005b8 	.word	0x200005b8
 8007dc4:	20000588 	.word	0x20000588
 8007dc8:	20000584 	.word	0x20000584
 8007dcc:	200005ec 	.word	0x200005ec

08007dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3b04      	subs	r3, #4
 8007de0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3b04      	subs	r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f023 0201 	bic.w	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3b04      	subs	r3, #4
 8007dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e00:	4a08      	ldr	r2, [pc, #32]	; (8007e24 <pxPortInitialiseStack+0x54>)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3b14      	subs	r3, #20
 8007e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3b20      	subs	r3, #32
 8007e16:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e18:	68fb      	ldr	r3, [r7, #12]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr
 8007e24:	08007e29 	.word	0x08007e29

08007e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e32:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <prvTaskExitError+0x54>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d00a      	beq.n	8007e52 <prvTaskExitError+0x2a>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	60fb      	str	r3, [r7, #12]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <prvTaskExitError+0x28>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60bb      	str	r3, [r7, #8]
}
 8007e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e66:	bf00      	nop
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0fc      	beq.n	8007e68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e6e:	bf00      	nop
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20000120 	.word	0x20000120

08007e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <pxCurrentTCBConst2>)
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	6808      	ldr	r0, [r1, #0]
 8007e86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e8a:	f380 8809 	msr	PSP, r0
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8811 	msr	BASEPRI, r0
 8007e9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007e9e:	4770      	bx	lr

08007ea0 <pxCurrentTCBConst2>:
 8007ea0:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007ea8:	4806      	ldr	r0, [pc, #24]	; (8007ec4 <prvPortStartFirstTask+0x1c>)
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	6800      	ldr	r0, [r0, #0]
 8007eae:	f380 8808 	msr	MSP, r0
 8007eb2:	b662      	cpsie	i
 8007eb4:	b661      	cpsie	f
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	df00      	svc	0
 8007ec0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ec2:	bf00      	nop
 8007ec4:	e000ed08 	.word	0xe000ed08

08007ec8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ece:	4b32      	ldr	r3, [pc, #200]	; (8007f98 <xPortStartScheduler+0xd0>)
 8007ed0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	22ff      	movs	r2, #255	; 0xff
 8007ede:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	4b2a      	ldr	r3, [pc, #168]	; (8007f9c <xPortStartScheduler+0xd4>)
 8007ef4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ef6:	4b2a      	ldr	r3, [pc, #168]	; (8007fa0 <xPortStartScheduler+0xd8>)
 8007ef8:	2207      	movs	r2, #7
 8007efa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007efc:	e009      	b.n	8007f12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007efe:	4b28      	ldr	r3, [pc, #160]	; (8007fa0 <xPortStartScheduler+0xd8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	4a26      	ldr	r2, [pc, #152]	; (8007fa0 <xPortStartScheduler+0xd8>)
 8007f06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1a:	2b80      	cmp	r3, #128	; 0x80
 8007f1c:	d0ef      	beq.n	8007efe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f1e:	4b20      	ldr	r3, [pc, #128]	; (8007fa0 <xPortStartScheduler+0xd8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f1c3 0307 	rsb	r3, r3, #7
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d00a      	beq.n	8007f40 <xPortStartScheduler+0x78>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	60bb      	str	r3, [r7, #8]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f40:	4b17      	ldr	r3, [pc, #92]	; (8007fa0 <xPortStartScheduler+0xd8>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	4a16      	ldr	r2, [pc, #88]	; (8007fa0 <xPortStartScheduler+0xd8>)
 8007f48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f4a:	4b15      	ldr	r3, [pc, #84]	; (8007fa0 <xPortStartScheduler+0xd8>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f52:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <xPortStartScheduler+0xd8>)
 8007f54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f5e:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <xPortStartScheduler+0xdc>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a10      	ldr	r2, [pc, #64]	; (8007fa4 <xPortStartScheduler+0xdc>)
 8007f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <xPortStartScheduler+0xdc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a0d      	ldr	r2, [pc, #52]	; (8007fa4 <xPortStartScheduler+0xdc>)
 8007f70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f76:	f000 f8b9 	bl	80080ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <xPortStartScheduler+0xe0>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f80:	f7ff ff92 	bl	8007ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f84:	f7ff fd60 	bl	8007a48 <vTaskSwitchContext>
	prvTaskExitError();
 8007f88:	f7ff ff4e 	bl	8007e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	e000e400 	.word	0xe000e400
 8007f9c:	200005f8 	.word	0x200005f8
 8007fa0:	200005fc 	.word	0x200005fc
 8007fa4:	e000ed20 	.word	0xe000ed20
 8007fa8:	20000120 	.word	0x20000120

08007fac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	607b      	str	r3, [r7, #4]
}
 8007fc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fc6:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <vPortEnterCritical+0x58>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	4a0d      	ldr	r2, [pc, #52]	; (8008004 <vPortEnterCritical+0x58>)
 8007fce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <vPortEnterCritical+0x58>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d10f      	bne.n	8007ff8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fd8:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <vPortEnterCritical+0x5c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	603b      	str	r3, [r7, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <vPortEnterCritical+0x4a>
	}
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000120 	.word	0x20000120
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008012:	4b11      	ldr	r3, [pc, #68]	; (8008058 <vPortExitCritical+0x4c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <vPortExitCritical+0x24>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	607b      	str	r3, [r7, #4]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008030:	4b09      	ldr	r3, [pc, #36]	; (8008058 <vPortExitCritical+0x4c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3b01      	subs	r3, #1
 8008036:	4a08      	ldr	r2, [pc, #32]	; (8008058 <vPortExitCritical+0x4c>)
 8008038:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800803a:	4b07      	ldr	r3, [pc, #28]	; (8008058 <vPortExitCritical+0x4c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <vPortExitCritical+0x42>
 8008042:	2300      	movs	r3, #0
 8008044:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800804c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr
 8008058:	20000120 	.word	0x20000120
 800805c:	00000000 	.word	0x00000000

08008060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008060:	f3ef 8009 	mrs	r0, PSP
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	4b0d      	ldr	r3, [pc, #52]	; (80080a0 <pxCurrentTCBConst>)
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008070:	6010      	str	r0, [r2, #0]
 8008072:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008076:	f04f 0050 	mov.w	r0, #80	; 0x50
 800807a:	f380 8811 	msr	BASEPRI, r0
 800807e:	f7ff fce3 	bl	8007a48 <vTaskSwitchContext>
 8008082:	f04f 0000 	mov.w	r0, #0
 8008086:	f380 8811 	msr	BASEPRI, r0
 800808a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	6808      	ldr	r0, [r1, #0]
 8008092:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008096:	f380 8809 	msr	PSP, r0
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	4770      	bx	lr

080080a0 <pxCurrentTCBConst>:
 80080a0:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop

080080a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
}
 80080c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080c2:	f7ff fc03 	bl	80078cc <xTaskIncrementTick>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <xPortSysTickHandler+0x40>)
 80080ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f383 8811 	msr	BASEPRI, r3
}
 80080de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	e000ed04 	.word	0xe000ed04

080080ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <vPortSetupTimerInterrupt+0x30>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080f6:	4b0a      	ldr	r3, [pc, #40]	; (8008120 <vPortSetupTimerInterrupt+0x34>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <vPortSetupTimerInterrupt+0x38>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a09      	ldr	r2, [pc, #36]	; (8008128 <vPortSetupTimerInterrupt+0x3c>)
 8008102:	fba2 2303 	umull	r2, r3, r2, r3
 8008106:	099b      	lsrs	r3, r3, #6
 8008108:	4a08      	ldr	r2, [pc, #32]	; (800812c <vPortSetupTimerInterrupt+0x40>)
 800810a:	3b01      	subs	r3, #1
 800810c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800810e:	4b03      	ldr	r3, [pc, #12]	; (800811c <vPortSetupTimerInterrupt+0x30>)
 8008110:	2207      	movs	r2, #7
 8008112:	601a      	str	r2, [r3, #0]
}
 8008114:	bf00      	nop
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr
 800811c:	e000e010 	.word	0xe000e010
 8008120:	e000e018 	.word	0xe000e018
 8008124:	20000004 	.word	0x20000004
 8008128:	10624dd3 	.word	0x10624dd3
 800812c:	e000e014 	.word	0xe000e014

08008130 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08a      	sub	sp, #40	; 0x28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800813c:	f7ff fb1c 	bl	8007778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008140:	4b58      	ldr	r3, [pc, #352]	; (80082a4 <pvPortMalloc+0x174>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008148:	f000 f910 	bl	800836c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800814c:	4b56      	ldr	r3, [pc, #344]	; (80082a8 <pvPortMalloc+0x178>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4013      	ands	r3, r2
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 808e 	bne.w	8008276 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01d      	beq.n	800819c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008160:	2208      	movs	r2, #8
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4413      	add	r3, r2
 8008166:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	2b00      	cmp	r3, #0
 8008170:	d014      	beq.n	800819c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f023 0307 	bic.w	r3, r3, #7
 8008178:	3308      	adds	r3, #8
 800817a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <pvPortMalloc+0x6c>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	617b      	str	r3, [r7, #20]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d069      	beq.n	8008276 <pvPortMalloc+0x146>
 80081a2:	4b42      	ldr	r3, [pc, #264]	; (80082ac <pvPortMalloc+0x17c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d864      	bhi.n	8008276 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081ac:	4b40      	ldr	r3, [pc, #256]	; (80082b0 <pvPortMalloc+0x180>)
 80081ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081b0:	4b3f      	ldr	r3, [pc, #252]	; (80082b0 <pvPortMalloc+0x180>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081b6:	e004      	b.n	80081c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d903      	bls.n	80081d4 <pvPortMalloc+0xa4>
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1f1      	bne.n	80081b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081d4:	4b33      	ldr	r3, [pc, #204]	; (80082a4 <pvPortMalloc+0x174>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081da:	429a      	cmp	r2, r3
 80081dc:	d04b      	beq.n	8008276 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2208      	movs	r2, #8
 80081e4:	4413      	add	r3, r2
 80081e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	1ad2      	subs	r2, r2, r3
 80081f8:	2308      	movs	r3, #8
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d91f      	bls.n	8008240 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4413      	add	r3, r2
 8008206:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <pvPortMalloc+0xf8>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	613b      	str	r3, [r7, #16]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800823a:	69b8      	ldr	r0, [r7, #24]
 800823c:	f000 f8f8 	bl	8008430 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008240:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <pvPortMalloc+0x17c>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	4a18      	ldr	r2, [pc, #96]	; (80082ac <pvPortMalloc+0x17c>)
 800824c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800824e:	4b17      	ldr	r3, [pc, #92]	; (80082ac <pvPortMalloc+0x17c>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <pvPortMalloc+0x184>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d203      	bcs.n	8008262 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800825a:	4b14      	ldr	r3, [pc, #80]	; (80082ac <pvPortMalloc+0x17c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <pvPortMalloc+0x184>)
 8008260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <pvPortMalloc+0x178>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	431a      	orrs	r2, r3
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008276:	f7ff fa8d 	bl	8007794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <pvPortMalloc+0x16a>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	60fb      	str	r3, [r7, #12]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <pvPortMalloc+0x168>
	return pvReturn;
 800829a:	69fb      	ldr	r3, [r7, #28]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3728      	adds	r7, #40	; 0x28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20001208 	.word	0x20001208
 80082a8:	20001214 	.word	0x20001214
 80082ac:	2000120c 	.word	0x2000120c
 80082b0:	20001200 	.word	0x20001200
 80082b4:	20001210 	.word	0x20001210

080082b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d048      	beq.n	800835c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082ca:	2308      	movs	r3, #8
 80082cc:	425b      	negs	r3, r3
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4413      	add	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	4b21      	ldr	r3, [pc, #132]	; (8008364 <vPortFree+0xac>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <vPortFree+0x44>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	60fb      	str	r3, [r7, #12]
}
 80082f8:	bf00      	nop
 80082fa:	e7fe      	b.n	80082fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <vPortFree+0x62>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	60bb      	str	r3, [r7, #8]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <vPortFree+0xac>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4013      	ands	r3, r2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d019      	beq.n	800835c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d115      	bne.n	800835c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <vPortFree+0xac>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	43db      	mvns	r3, r3
 800833a:	401a      	ands	r2, r3
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008340:	f7ff fa1a 	bl	8007778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	4b07      	ldr	r3, [pc, #28]	; (8008368 <vPortFree+0xb0>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4413      	add	r3, r2
 800834e:	4a06      	ldr	r2, [pc, #24]	; (8008368 <vPortFree+0xb0>)
 8008350:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008352:	6938      	ldr	r0, [r7, #16]
 8008354:	f000 f86c 	bl	8008430 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008358:	f7ff fa1c 	bl	8007794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800835c:	bf00      	nop
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20001214 	.word	0x20001214
 8008368:	2000120c 	.word	0x2000120c

0800836c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008372:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008376:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008378:	4b27      	ldr	r3, [pc, #156]	; (8008418 <prvHeapInit+0xac>)
 800837a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00c      	beq.n	80083a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3307      	adds	r3, #7
 800838a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0307 	bic.w	r3, r3, #7
 8008392:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	4a1f      	ldr	r2, [pc, #124]	; (8008418 <prvHeapInit+0xac>)
 800839c:	4413      	add	r3, r2
 800839e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083a4:	4a1d      	ldr	r2, [pc, #116]	; (800841c <prvHeapInit+0xb0>)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083aa:	4b1c      	ldr	r3, [pc, #112]	; (800841c <prvHeapInit+0xb0>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	4413      	add	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083b8:	2208      	movs	r2, #8
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0307 	bic.w	r3, r3, #7
 80083c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4a15      	ldr	r2, [pc, #84]	; (8008420 <prvHeapInit+0xb4>)
 80083cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083ce:	4b14      	ldr	r3, [pc, #80]	; (8008420 <prvHeapInit+0xb4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2200      	movs	r2, #0
 80083d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083d6:	4b12      	ldr	r3, [pc, #72]	; (8008420 <prvHeapInit+0xb4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	1ad2      	subs	r2, r2, r3
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083ec:	4b0c      	ldr	r3, [pc, #48]	; (8008420 <prvHeapInit+0xb4>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4a0a      	ldr	r2, [pc, #40]	; (8008424 <prvHeapInit+0xb8>)
 80083fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	4a09      	ldr	r2, [pc, #36]	; (8008428 <prvHeapInit+0xbc>)
 8008402:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008404:	4b09      	ldr	r3, [pc, #36]	; (800842c <prvHeapInit+0xc0>)
 8008406:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800840a:	601a      	str	r2, [r3, #0]
}
 800840c:	bf00      	nop
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	bc80      	pop	{r7}
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	20000600 	.word	0x20000600
 800841c:	20001200 	.word	0x20001200
 8008420:	20001208 	.word	0x20001208
 8008424:	20001210 	.word	0x20001210
 8008428:	2000120c 	.word	0x2000120c
 800842c:	20001214 	.word	0x20001214

08008430 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008438:	4b27      	ldr	r3, [pc, #156]	; (80084d8 <prvInsertBlockIntoFreeList+0xa8>)
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	e002      	b.n	8008444 <prvInsertBlockIntoFreeList+0x14>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	429a      	cmp	r2, r3
 800844c:	d8f7      	bhi.n	800843e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	4413      	add	r3, r2
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d108      	bne.n	8008472 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	441a      	add	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	441a      	add	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d118      	bne.n	80084b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4b14      	ldr	r3, [pc, #80]	; (80084dc <prvInsertBlockIntoFreeList+0xac>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d00d      	beq.n	80084ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	441a      	add	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	e008      	b.n	80084c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084ae:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <prvInsertBlockIntoFreeList+0xac>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	e003      	b.n	80084c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d002      	beq.n	80084ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bc80      	pop	{r7}
 80084d6:	4770      	bx	lr
 80084d8:	20001200 	.word	0x20001200
 80084dc:	20001208 	.word	0x20001208

080084e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4912      	ldr	r1, [pc, #72]	; (8008530 <MX_USB_DEVICE_Init+0x50>)
 80084e8:	4812      	ldr	r0, [pc, #72]	; (8008534 <MX_USB_DEVICE_Init+0x54>)
 80084ea:	f7fd fd3e 	bl	8005f6a <USBD_Init>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084f4:	f7f7 ff7c 	bl	80003f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084f8:	490f      	ldr	r1, [pc, #60]	; (8008538 <MX_USB_DEVICE_Init+0x58>)
 80084fa:	480e      	ldr	r0, [pc, #56]	; (8008534 <MX_USB_DEVICE_Init+0x54>)
 80084fc:	f7fd fd60 	bl	8005fc0 <USBD_RegisterClass>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008506:	f7f7 ff73 	bl	80003f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800850a:	490c      	ldr	r1, [pc, #48]	; (800853c <MX_USB_DEVICE_Init+0x5c>)
 800850c:	4809      	ldr	r0, [pc, #36]	; (8008534 <MX_USB_DEVICE_Init+0x54>)
 800850e:	f7fd fc91 	bl	8005e34 <USBD_CDC_RegisterInterface>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008518:	f7f7 ff6a 	bl	80003f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800851c:	4805      	ldr	r0, [pc, #20]	; (8008534 <MX_USB_DEVICE_Init+0x54>)
 800851e:	f7fd fd68 	bl	8005ff2 <USBD_Start>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008528:	f7f7 ff62 	bl	80003f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800852c:	bf00      	nop
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20000134 	.word	0x20000134
 8008534:	20001218 	.word	0x20001218
 8008538:	2000001c 	.word	0x2000001c
 800853c:	20000124 	.word	0x20000124

08008540 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008544:	2200      	movs	r2, #0
 8008546:	4905      	ldr	r1, [pc, #20]	; (800855c <CDC_Init_FS+0x1c>)
 8008548:	4805      	ldr	r0, [pc, #20]	; (8008560 <CDC_Init_FS+0x20>)
 800854a:	f7fd fc89 	bl	8005e60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800854e:	4905      	ldr	r1, [pc, #20]	; (8008564 <CDC_Init_FS+0x24>)
 8008550:	4803      	ldr	r0, [pc, #12]	; (8008560 <CDC_Init_FS+0x20>)
 8008552:	f7fd fc9e 	bl	8005e92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008556:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008558:	4618      	mov	r0, r3
 800855a:	bd80      	pop	{r7, pc}
 800855c:	200018c4 	.word	0x200018c4
 8008560:	20001218 	.word	0x20001218
 8008564:	200014dc 	.word	0x200014dc

08008568 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800856c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800856e:	4618      	mov	r0, r3
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr
	...

08008578 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	6039      	str	r1, [r7, #0]
 8008582:	71fb      	strb	r3, [r7, #7]
 8008584:	4613      	mov	r3, r2
 8008586:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	2b23      	cmp	r3, #35	; 0x23
 800858c:	d84a      	bhi.n	8008624 <CDC_Control_FS+0xac>
 800858e:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <CDC_Control_FS+0x1c>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	08008625 	.word	0x08008625
 8008598:	08008625 	.word	0x08008625
 800859c:	08008625 	.word	0x08008625
 80085a0:	08008625 	.word	0x08008625
 80085a4:	08008625 	.word	0x08008625
 80085a8:	08008625 	.word	0x08008625
 80085ac:	08008625 	.word	0x08008625
 80085b0:	08008625 	.word	0x08008625
 80085b4:	08008625 	.word	0x08008625
 80085b8:	08008625 	.word	0x08008625
 80085bc:	08008625 	.word	0x08008625
 80085c0:	08008625 	.word	0x08008625
 80085c4:	08008625 	.word	0x08008625
 80085c8:	08008625 	.word	0x08008625
 80085cc:	08008625 	.word	0x08008625
 80085d0:	08008625 	.word	0x08008625
 80085d4:	08008625 	.word	0x08008625
 80085d8:	08008625 	.word	0x08008625
 80085dc:	08008625 	.word	0x08008625
 80085e0:	08008625 	.word	0x08008625
 80085e4:	08008625 	.word	0x08008625
 80085e8:	08008625 	.word	0x08008625
 80085ec:	08008625 	.word	0x08008625
 80085f0:	08008625 	.word	0x08008625
 80085f4:	08008625 	.word	0x08008625
 80085f8:	08008625 	.word	0x08008625
 80085fc:	08008625 	.word	0x08008625
 8008600:	08008625 	.word	0x08008625
 8008604:	08008625 	.word	0x08008625
 8008608:	08008625 	.word	0x08008625
 800860c:	08008625 	.word	0x08008625
 8008610:	08008625 	.word	0x08008625
 8008614:	08008625 	.word	0x08008625
 8008618:	08008625 	.word	0x08008625
 800861c:	08008625 	.word	0x08008625
 8008620:	08008625 	.word	0x08008625
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008624:	bf00      	nop
  }

  return (USBD_OK);
 8008626:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008628:	4618      	mov	r0, r3
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop

08008634 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	4805      	ldr	r0, [pc, #20]	; (8008658 <CDC_Receive_FS+0x24>)
 8008642:	f7fd fc26 	bl	8005e92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008646:	4804      	ldr	r0, [pc, #16]	; (8008658 <CDC_Receive_FS+0x24>)
 8008648:	f7fd fc65 	bl	8005f16 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800864c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20001218 	.word	0x20001218

0800865c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800866c:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <CDC_Transmit_FS+0x48>)
 800866e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008672:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800867e:	2301      	movs	r3, #1
 8008680:	e00b      	b.n	800869a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008682:	887b      	ldrh	r3, [r7, #2]
 8008684:	461a      	mov	r2, r3
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	4806      	ldr	r0, [pc, #24]	; (80086a4 <CDC_Transmit_FS+0x48>)
 800868a:	f7fd fbe9 	bl	8005e60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800868e:	4805      	ldr	r0, [pc, #20]	; (80086a4 <CDC_Transmit_FS+0x48>)
 8008690:	f7fd fc12 	bl	8005eb8 <USBD_CDC_TransmitPacket>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008698:	7bfb      	ldrb	r3, [r7, #15]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20001218 	.word	0x20001218

080086a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2212      	movs	r2, #18
 80086b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086ba:	4b03      	ldr	r3, [pc, #12]	; (80086c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	20000150 	.word	0x20000150

080086cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2204      	movs	r2, #4
 80086dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086de:	4b03      	ldr	r3, [pc, #12]	; (80086ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	20000164 	.word	0x20000164

080086f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d105      	bne.n	800870e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	4907      	ldr	r1, [pc, #28]	; (8008724 <USBD_FS_ProductStrDescriptor+0x34>)
 8008706:	4808      	ldr	r0, [pc, #32]	; (8008728 <USBD_FS_ProductStrDescriptor+0x38>)
 8008708:	f7fe fbec 	bl	8006ee4 <USBD_GetString>
 800870c:	e004      	b.n	8008718 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	4904      	ldr	r1, [pc, #16]	; (8008724 <USBD_FS_ProductStrDescriptor+0x34>)
 8008712:	4805      	ldr	r0, [pc, #20]	; (8008728 <USBD_FS_ProductStrDescriptor+0x38>)
 8008714:	f7fe fbe6 	bl	8006ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20001cac 	.word	0x20001cac
 8008728:	080090a8 	.word	0x080090a8

0800872c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	6039      	str	r1, [r7, #0]
 8008736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	4904      	ldr	r1, [pc, #16]	; (800874c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800873c:	4804      	ldr	r0, [pc, #16]	; (8008750 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800873e:	f7fe fbd1 	bl	8006ee4 <USBD_GetString>
  return USBD_StrDesc;
 8008742:	4b02      	ldr	r3, [pc, #8]	; (800874c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20001cac 	.word	0x20001cac
 8008750:	080090c0 	.word	0x080090c0

08008754 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	221a      	movs	r2, #26
 8008764:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008766:	f000 f843 	bl	80087f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800876a:	4b02      	ldr	r3, [pc, #8]	; (8008774 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000168 	.word	0x20000168

08008778 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	4907      	ldr	r1, [pc, #28]	; (80087ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800878e:	4808      	ldr	r0, [pc, #32]	; (80087b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008790:	f7fe fba8 	bl	8006ee4 <USBD_GetString>
 8008794:	e004      	b.n	80087a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	4904      	ldr	r1, [pc, #16]	; (80087ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800879a:	4805      	ldr	r0, [pc, #20]	; (80087b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800879c:	f7fe fba2 	bl	8006ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087a0:	4b02      	ldr	r3, [pc, #8]	; (80087ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20001cac 	.word	0x20001cac
 80087b0:	080090d4 	.word	0x080090d4

080087b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d105      	bne.n	80087d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	4907      	ldr	r1, [pc, #28]	; (80087e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ca:	4808      	ldr	r0, [pc, #32]	; (80087ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087cc:	f7fe fb8a 	bl	8006ee4 <USBD_GetString>
 80087d0:	e004      	b.n	80087dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	4904      	ldr	r1, [pc, #16]	; (80087e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087d6:	4805      	ldr	r0, [pc, #20]	; (80087ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087d8:	f7fe fb84 	bl	8006ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087dc:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20001cac 	.word	0x20001cac
 80087ec:	080090e0 	.word	0x080090e0

080087f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <Get_SerialNum+0x44>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087fc:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <Get_SerialNum+0x48>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008802:	4b0e      	ldr	r3, [pc, #56]	; (800883c <Get_SerialNum+0x4c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d009      	beq.n	800882a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008816:	2208      	movs	r2, #8
 8008818:	4909      	ldr	r1, [pc, #36]	; (8008840 <Get_SerialNum+0x50>)
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f814 	bl	8008848 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008820:	2204      	movs	r2, #4
 8008822:	4908      	ldr	r1, [pc, #32]	; (8008844 <Get_SerialNum+0x54>)
 8008824:	68b8      	ldr	r0, [r7, #8]
 8008826:	f000 f80f 	bl	8008848 <IntToUnicode>
  }
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	1ffff7e8 	.word	0x1ffff7e8
 8008838:	1ffff7ec 	.word	0x1ffff7ec
 800883c:	1ffff7f0 	.word	0x1ffff7f0
 8008840:	2000016a 	.word	0x2000016a
 8008844:	2000017a 	.word	0x2000017a

08008848 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800885a:	2300      	movs	r3, #0
 800885c:	75fb      	strb	r3, [r7, #23]
 800885e:	e027      	b.n	80088b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	0f1b      	lsrs	r3, r3, #28
 8008864:	2b09      	cmp	r3, #9
 8008866:	d80b      	bhi.n	8008880 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	0f1b      	lsrs	r3, r3, #28
 800886c:	b2da      	uxtb	r2, r3
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	4619      	mov	r1, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	440b      	add	r3, r1
 8008878:	3230      	adds	r2, #48	; 0x30
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	701a      	strb	r2, [r3, #0]
 800887e:	e00a      	b.n	8008896 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	0f1b      	lsrs	r3, r3, #28
 8008884:	b2da      	uxtb	r2, r3
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4619      	mov	r1, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	440b      	add	r3, r1
 8008890:	3237      	adds	r2, #55	; 0x37
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	3301      	adds	r3, #1
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	4413      	add	r3, r2
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	3301      	adds	r3, #1
 80088ae:	75fb      	strb	r3, [r7, #23]
 80088b0:	7dfa      	ldrb	r2, [r7, #23]
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d3d3      	bcc.n	8008860 <IntToUnicode+0x18>
  }
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	371c      	adds	r7, #28
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc80      	pop	{r7}
 80088c2:	4770      	bx	lr

080088c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a0d      	ldr	r2, [pc, #52]	; (8008908 <HAL_PCD_MspInit+0x44>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d113      	bne.n	80088fe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <HAL_PCD_MspInit+0x48>)
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	4a0c      	ldr	r2, [pc, #48]	; (800890c <HAL_PCD_MspInit+0x48>)
 80088dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088e0:	61d3      	str	r3, [r2, #28]
 80088e2:	4b0a      	ldr	r3, [pc, #40]	; (800890c <HAL_PCD_MspInit+0x48>)
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80088ee:	2200      	movs	r2, #0
 80088f0:	2105      	movs	r1, #5
 80088f2:	2014      	movs	r0, #20
 80088f4:	f7f7 ff4b 	bl	800078e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80088f8:	2014      	movs	r0, #20
 80088fa:	f7f7 ff64 	bl	80007c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	40005c00 	.word	0x40005c00
 800890c:	40021000 	.word	0x40021000

08008910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f7fd fbab 	bl	8006082 <USBD_LL_SetupStage>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	440b      	add	r3, r1
 8008954:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	4619      	mov	r1, r3
 800895e:	f7fd fbdd 	bl	800611c <USBD_LL_DataOutStage>
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	440b      	add	r3, r1
 800898a:	333c      	adds	r3, #60	; 0x3c
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	4619      	mov	r1, r3
 8008992:	f7fd fc34 	bl	80061fe <USBD_LL_DataInStage>
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fd fd44 	bl	800643a <USBD_LL_SOF>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089c2:	2301      	movs	r3, #1
 80089c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d001      	beq.n	80089d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089ce:	f7f7 fd0f 	bl	80003f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089d8:	7bfa      	ldrb	r2, [r7, #15]
 80089da:	4611      	mov	r1, r2
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fd fcf4 	bl	80063ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fd fcad 	bl	8006348 <USBD_LL_Reset>
}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fd fcee 	bl	80063e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d005      	beq.n	8008a20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <HAL_PCD_SuspendCallback+0x30>)
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	4a03      	ldr	r2, [pc, #12]	; (8008a28 <HAL_PCD_SuspendCallback+0x30>)
 8008a1a:	f043 0306 	orr.w	r3, r3, #6
 8008a1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed00 	.word	0xe000ed00

08008a2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fd fce8 	bl	8006410 <USBD_LL_Resume>
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a50:	4a28      	ldr	r2, [pc, #160]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a26      	ldr	r2, [pc, #152]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008a60:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a62:	4a25      	ldr	r2, [pc, #148]	; (8008af8 <USBD_LL_Init+0xb0>)
 8008a64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a66:	4b23      	ldr	r3, [pc, #140]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a68:	2208      	movs	r2, #8
 8008a6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a6c:	4b21      	ldr	r3, [pc, #132]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a6e:	2202      	movs	r2, #2
 8008a70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a72:	4b20      	ldr	r3, [pc, #128]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a78:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a7e:	4b1d      	ldr	r3, [pc, #116]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a84:	481b      	ldr	r0, [pc, #108]	; (8008af4 <USBD_LL_Init+0xac>)
 8008a86:	f7f8 f86e 	bl	8000b66 <HAL_PCD_Init>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a90:	f7f7 fcae 	bl	80003f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a9a:	2318      	movs	r3, #24
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f7f9 fce2 	bl	8002468 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aaa:	2358      	movs	r3, #88	; 0x58
 8008aac:	2200      	movs	r2, #0
 8008aae:	2180      	movs	r1, #128	; 0x80
 8008ab0:	f7f9 fcda 	bl	8002468 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aba:	23c0      	movs	r3, #192	; 0xc0
 8008abc:	2200      	movs	r2, #0
 8008abe:	2181      	movs	r1, #129	; 0x81
 8008ac0:	f7f9 fcd2 	bl	8002468 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	f7f9 fcc9 	bl	8002468 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2182      	movs	r1, #130	; 0x82
 8008ae4:	f7f9 fcc0 	bl	8002468 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20001eac 	.word	0x20001eac
 8008af8:	40005c00 	.word	0x40005c00

08008afc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7f8 f932 	bl	8000d7c <HAL_PCD_Start>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 f94e 	bl	8008dc0 <USBD_Get_USB_Status>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	461a      	mov	r2, r3
 8008b40:	4603      	mov	r3, r0
 8008b42:	70fb      	strb	r3, [r7, #3]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70bb      	strb	r3, [r7, #2]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b5a:	78bb      	ldrb	r3, [r7, #2]
 8008b5c:	883a      	ldrh	r2, [r7, #0]
 8008b5e:	78f9      	ldrb	r1, [r7, #3]
 8008b60:	f7f8 faaa 	bl	80010b8 <HAL_PCD_EP_Open>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f928 	bl	8008dc0 <USBD_Get_USB_Status>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b98:	78fa      	ldrb	r2, [r7, #3]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7f8 faf1 	bl	8001184 <HAL_PCD_EP_Close>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f909 	bl	8008dc0 <USBD_Get_USB_Status>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f8 fbb1 	bl	8001342 <HAL_PCD_EP_SetStall>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f8ea 	bl	8008dc0 <USBD_Get_USB_Status>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	460b      	mov	r3, r1
 8008c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7f8 fbf2 	bl	8001402 <HAL_PCD_EP_ClrStall>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 f8cb 	bl	8008dc0 <USBD_Get_USB_Status>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	da0c      	bge.n	8008c6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5a:	68f9      	ldr	r1, [r7, #12]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	00db      	lsls	r3, r3, #3
 8008c66:	440b      	add	r3, r1
 8008c68:	3302      	adds	r3, #2
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	e00b      	b.n	8008c86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c74:	68f9      	ldr	r1, [r7, #12]
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	440b      	add	r3, r1
 8008c80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c84:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr

08008c90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008caa:	78fa      	ldrb	r2, [r7, #3]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7f8 f9dd 	bl	800106e <HAL_PCD_SetAddress>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 f880 	bl	8008dc0 <USBD_Get_USB_Status>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b086      	sub	sp, #24
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	460b      	mov	r3, r1
 8008cdc:	72fb      	strb	r3, [r7, #11]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cf0:	893b      	ldrh	r3, [r7, #8]
 8008cf2:	7af9      	ldrb	r1, [r7, #11]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	f7f8 fae1 	bl	80012bc <HAL_PCD_EP_Transmit>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f85d 	bl	8008dc0 <USBD_Get_USB_Status>
 8008d06:	4603      	mov	r3, r0
 8008d08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	460b      	mov	r3, r1
 8008d22:	72fb      	strb	r3, [r7, #11]
 8008d24:	4613      	mov	r3, r2
 8008d26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d36:	893b      	ldrh	r3, [r7, #8]
 8008d38:	7af9      	ldrb	r1, [r7, #11]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	f7f8 fa6a 	bl	8001214 <HAL_PCD_EP_Receive>
 8008d40:	4603      	mov	r3, r0
 8008d42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f83a 	bl	8008dc0 <USBD_Get_USB_Status>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d50:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	460b      	mov	r3, r1
 8008d64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7f8 fa8c 	bl	800128e <HAL_PCD_EP_GetRxCount>
 8008d76:	4603      	mov	r3, r0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <USBD_static_malloc+0x14>)
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc80      	pop	{r7}
 8008d92:	4770      	bx	lr
 8008d94:	20002198 	.word	0x20002198

08008d98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]

}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc80      	pop	{r7}
 8008da8:	4770      	bx	lr

08008daa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr

08008dc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d817      	bhi.n	8008e04 <USBD_Get_USB_Status+0x44>
 8008dd4:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <USBD_Get_USB_Status+0x1c>)
 8008dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dda:	bf00      	nop
 8008ddc:	08008ded 	.word	0x08008ded
 8008de0:	08008df3 	.word	0x08008df3
 8008de4:	08008df9 	.word	0x08008df9
 8008de8:	08008dff 	.word	0x08008dff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]
    break;
 8008df0:	e00b      	b.n	8008e0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008df2:	2302      	movs	r3, #2
 8008df4:	73fb      	strb	r3, [r7, #15]
    break;
 8008df6:	e008      	b.n	8008e0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfc:	e005      	b.n	8008e0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dfe:	2302      	movs	r3, #2
 8008e00:	73fb      	strb	r3, [r7, #15]
    break;
 8008e02:	e002      	b.n	8008e0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e04:	2302      	movs	r3, #2
 8008e06:	73fb      	strb	r3, [r7, #15]
    break;
 8008e08:	bf00      	nop
  }
  return usb_status;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bc80      	pop	{r7}
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop

08008e18 <__libc_init_array>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	2600      	movs	r6, #0
 8008e1c:	4d0c      	ldr	r5, [pc, #48]	; (8008e50 <__libc_init_array+0x38>)
 8008e1e:	4c0d      	ldr	r4, [pc, #52]	; (8008e54 <__libc_init_array+0x3c>)
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	42a6      	cmp	r6, r4
 8008e26:	d109      	bne.n	8008e3c <__libc_init_array+0x24>
 8008e28:	f000 f8e2 	bl	8008ff0 <_init>
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	4d0a      	ldr	r5, [pc, #40]	; (8008e58 <__libc_init_array+0x40>)
 8008e30:	4c0a      	ldr	r4, [pc, #40]	; (8008e5c <__libc_init_array+0x44>)
 8008e32:	1b64      	subs	r4, r4, r5
 8008e34:	10a4      	asrs	r4, r4, #2
 8008e36:	42a6      	cmp	r6, r4
 8008e38:	d105      	bne.n	8008e46 <__libc_init_array+0x2e>
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e40:	4798      	blx	r3
 8008e42:	3601      	adds	r6, #1
 8008e44:	e7ee      	b.n	8008e24 <__libc_init_array+0xc>
 8008e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4a:	4798      	blx	r3
 8008e4c:	3601      	adds	r6, #1
 8008e4e:	e7f2      	b.n	8008e36 <__libc_init_array+0x1e>
 8008e50:	08009160 	.word	0x08009160
 8008e54:	08009160 	.word	0x08009160
 8008e58:	08009160 	.word	0x08009160
 8008e5c:	08009164 	.word	0x08009164

08008e60 <__retarget_lock_acquire_recursive>:
 8008e60:	4770      	bx	lr

08008e62 <__retarget_lock_release_recursive>:
 8008e62:	4770      	bx	lr

08008e64 <memset>:
 8008e64:	4603      	mov	r3, r0
 8008e66:	4402      	add	r2, r0
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d100      	bne.n	8008e6e <memset+0xa>
 8008e6c:	4770      	bx	lr
 8008e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e72:	e7f9      	b.n	8008e68 <memset+0x4>

08008e74 <cleanup_glue>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	460c      	mov	r4, r1
 8008e78:	6809      	ldr	r1, [r1, #0]
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	b109      	cbz	r1, 8008e82 <cleanup_glue+0xe>
 8008e7e:	f7ff fff9 	bl	8008e74 <cleanup_glue>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4628      	mov	r0, r5
 8008e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e8a:	f000 b869 	b.w	8008f60 <_free_r>
	...

08008e90 <_reclaim_reent>:
 8008e90:	4b2c      	ldr	r3, [pc, #176]	; (8008f44 <_reclaim_reent+0xb4>)
 8008e92:	b570      	push	{r4, r5, r6, lr}
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4604      	mov	r4, r0
 8008e98:	4283      	cmp	r3, r0
 8008e9a:	d051      	beq.n	8008f40 <_reclaim_reent+0xb0>
 8008e9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e9e:	b143      	cbz	r3, 8008eb2 <_reclaim_reent+0x22>
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d14a      	bne.n	8008f3c <_reclaim_reent+0xac>
 8008ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ea8:	6819      	ldr	r1, [r3, #0]
 8008eaa:	b111      	cbz	r1, 8008eb2 <_reclaim_reent+0x22>
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 f857 	bl	8008f60 <_free_r>
 8008eb2:	6961      	ldr	r1, [r4, #20]
 8008eb4:	b111      	cbz	r1, 8008ebc <_reclaim_reent+0x2c>
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 f852 	bl	8008f60 <_free_r>
 8008ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ebe:	b111      	cbz	r1, 8008ec6 <_reclaim_reent+0x36>
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 f84d 	bl	8008f60 <_free_r>
 8008ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ec8:	b111      	cbz	r1, 8008ed0 <_reclaim_reent+0x40>
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 f848 	bl	8008f60 <_free_r>
 8008ed0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ed2:	b111      	cbz	r1, 8008eda <_reclaim_reent+0x4a>
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 f843 	bl	8008f60 <_free_r>
 8008eda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008edc:	b111      	cbz	r1, 8008ee4 <_reclaim_reent+0x54>
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 f83e 	bl	8008f60 <_free_r>
 8008ee4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ee6:	b111      	cbz	r1, 8008eee <_reclaim_reent+0x5e>
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 f839 	bl	8008f60 <_free_r>
 8008eee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ef0:	b111      	cbz	r1, 8008ef8 <_reclaim_reent+0x68>
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 f834 	bl	8008f60 <_free_r>
 8008ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008efa:	b111      	cbz	r1, 8008f02 <_reclaim_reent+0x72>
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 f82f 	bl	8008f60 <_free_r>
 8008f02:	69a3      	ldr	r3, [r4, #24]
 8008f04:	b1e3      	cbz	r3, 8008f40 <_reclaim_reent+0xb0>
 8008f06:	4620      	mov	r0, r4
 8008f08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f0a:	4798      	blx	r3
 8008f0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f0e:	b1b9      	cbz	r1, 8008f40 <_reclaim_reent+0xb0>
 8008f10:	4620      	mov	r0, r4
 8008f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f16:	f7ff bfad 	b.w	8008e74 <cleanup_glue>
 8008f1a:	5949      	ldr	r1, [r1, r5]
 8008f1c:	b941      	cbnz	r1, 8008f30 <_reclaim_reent+0xa0>
 8008f1e:	3504      	adds	r5, #4
 8008f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f22:	2d80      	cmp	r5, #128	; 0x80
 8008f24:	68d9      	ldr	r1, [r3, #12]
 8008f26:	d1f8      	bne.n	8008f1a <_reclaim_reent+0x8a>
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 f819 	bl	8008f60 <_free_r>
 8008f2e:	e7ba      	b.n	8008ea6 <_reclaim_reent+0x16>
 8008f30:	680e      	ldr	r6, [r1, #0]
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 f814 	bl	8008f60 <_free_r>
 8008f38:	4631      	mov	r1, r6
 8008f3a:	e7ef      	b.n	8008f1c <_reclaim_reent+0x8c>
 8008f3c:	2500      	movs	r5, #0
 8008f3e:	e7ef      	b.n	8008f20 <_reclaim_reent+0x90>
 8008f40:	bd70      	pop	{r4, r5, r6, pc}
 8008f42:	bf00      	nop
 8008f44:	20000184 	.word	0x20000184

08008f48 <__malloc_lock>:
 8008f48:	4801      	ldr	r0, [pc, #4]	; (8008f50 <__malloc_lock+0x8>)
 8008f4a:	f7ff bf89 	b.w	8008e60 <__retarget_lock_acquire_recursive>
 8008f4e:	bf00      	nop
 8008f50:	200023b8 	.word	0x200023b8

08008f54 <__malloc_unlock>:
 8008f54:	4801      	ldr	r0, [pc, #4]	; (8008f5c <__malloc_unlock+0x8>)
 8008f56:	f7ff bf84 	b.w	8008e62 <__retarget_lock_release_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	200023b8 	.word	0x200023b8

08008f60 <_free_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4605      	mov	r5, r0
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d040      	beq.n	8008fea <_free_r+0x8a>
 8008f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6c:	1f0c      	subs	r4, r1, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfb8      	it	lt
 8008f72:	18e4      	addlt	r4, r4, r3
 8008f74:	f7ff ffe8 	bl	8008f48 <__malloc_lock>
 8008f78:	4a1c      	ldr	r2, [pc, #112]	; (8008fec <_free_r+0x8c>)
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	b933      	cbnz	r3, 8008f8c <_free_r+0x2c>
 8008f7e:	6063      	str	r3, [r4, #4]
 8008f80:	6014      	str	r4, [r2, #0]
 8008f82:	4628      	mov	r0, r5
 8008f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f88:	f7ff bfe4 	b.w	8008f54 <__malloc_unlock>
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	d908      	bls.n	8008fa2 <_free_r+0x42>
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	1821      	adds	r1, r4, r0
 8008f94:	428b      	cmp	r3, r1
 8008f96:	bf01      	itttt	eq
 8008f98:	6819      	ldreq	r1, [r3, #0]
 8008f9a:	685b      	ldreq	r3, [r3, #4]
 8008f9c:	1809      	addeq	r1, r1, r0
 8008f9e:	6021      	streq	r1, [r4, #0]
 8008fa0:	e7ed      	b.n	8008f7e <_free_r+0x1e>
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	b10b      	cbz	r3, 8008fac <_free_r+0x4c>
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	d9fa      	bls.n	8008fa2 <_free_r+0x42>
 8008fac:	6811      	ldr	r1, [r2, #0]
 8008fae:	1850      	adds	r0, r2, r1
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d10b      	bne.n	8008fcc <_free_r+0x6c>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	4401      	add	r1, r0
 8008fb8:	1850      	adds	r0, r2, r1
 8008fba:	4283      	cmp	r3, r0
 8008fbc:	6011      	str	r1, [r2, #0]
 8008fbe:	d1e0      	bne.n	8008f82 <_free_r+0x22>
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4401      	add	r1, r0
 8008fc6:	6011      	str	r1, [r2, #0]
 8008fc8:	6053      	str	r3, [r2, #4]
 8008fca:	e7da      	b.n	8008f82 <_free_r+0x22>
 8008fcc:	d902      	bls.n	8008fd4 <_free_r+0x74>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	e7d6      	b.n	8008f82 <_free_r+0x22>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	1821      	adds	r1, r4, r0
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	bf01      	itttt	eq
 8008fdc:	6819      	ldreq	r1, [r3, #0]
 8008fde:	685b      	ldreq	r3, [r3, #4]
 8008fe0:	1809      	addeq	r1, r1, r0
 8008fe2:	6021      	streq	r1, [r4, #0]
 8008fe4:	6063      	str	r3, [r4, #4]
 8008fe6:	6054      	str	r4, [r2, #4]
 8008fe8:	e7cb      	b.n	8008f82 <_free_r+0x22>
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	200023bc 	.word	0x200023bc

08008ff0 <_init>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr

08008ffc <_fini>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	bf00      	nop
 8009000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009002:	bc08      	pop	{r3}
 8009004:	469e      	mov	lr, r3
 8009006:	4770      	bx	lr
